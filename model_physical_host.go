/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gocons3rt

import (
	"encoding/json"
)

// PhysicalHost struct for PhysicalHost
type PhysicalHost struct {
	PhysicalMachine *PhysicalMachine `json:"physicalMachine,omitempty"`
	IpAddress *string `json:"ipAddress,omitempty"`
	MacAddress *string `json:"macAddress,omitempty"`
	Hostname *string `json:"hostname,omitempty"`
}

// NewPhysicalHost instantiates a new PhysicalHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalHost(subtype string) *PhysicalHost {
	this := PhysicalHost{}
	this.Subtype = subtype
	return &this
}

// NewPhysicalHostWithDefaults instantiates a new PhysicalHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalHostWithDefaults() *PhysicalHost {
	this := PhysicalHost{}
	return &this
}

// GetPhysicalMachine returns the PhysicalMachine field value if set, zero value otherwise.
func (o *PhysicalHost) GetPhysicalMachine() PhysicalMachine {
	if o == nil || o.PhysicalMachine == nil {
		var ret PhysicalMachine
		return ret
	}
	return *o.PhysicalMachine
}

// GetPhysicalMachineOk returns a tuple with the PhysicalMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalHost) GetPhysicalMachineOk() (*PhysicalMachine, bool) {
	if o == nil || o.PhysicalMachine == nil {
		return nil, false
	}
	return o.PhysicalMachine, true
}

// HasPhysicalMachine returns a boolean if a field has been set.
func (o *PhysicalHost) HasPhysicalMachine() bool {
	if o != nil && o.PhysicalMachine != nil {
		return true
	}

	return false
}

// SetPhysicalMachine gets a reference to the given PhysicalMachine and assigns it to the PhysicalMachine field.
func (o *PhysicalHost) SetPhysicalMachine(v PhysicalMachine) {
	o.PhysicalMachine = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *PhysicalHost) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalHost) GetIpAddressOk() (*string, bool) {
	if o == nil || o.IpAddress == nil {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *PhysicalHost) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *PhysicalHost) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *PhysicalHost) GetMacAddress() string {
	if o == nil || o.MacAddress == nil {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalHost) GetMacAddressOk() (*string, bool) {
	if o == nil || o.MacAddress == nil {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *PhysicalHost) HasMacAddress() bool {
	if o != nil && o.MacAddress != nil {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *PhysicalHost) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *PhysicalHost) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalHost) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *PhysicalHost) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *PhysicalHost) SetHostname(v string) {
	o.Hostname = &v
}

func (o PhysicalHost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PhysicalMachine != nil {
		toSerialize["physicalMachine"] = o.PhysicalMachine
	}
	if o.IpAddress != nil {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if o.MacAddress != nil {
		toSerialize["macAddress"] = o.MacAddress
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalHost struct {
	value *PhysicalHost
	isSet bool
}

func (v NullablePhysicalHost) Get() *PhysicalHost {
	return v.value
}

func (v *NullablePhysicalHost) Set(val *PhysicalHost) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalHost) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalHost(val *PhysicalHost) *NullablePhysicalHost {
	return &NullablePhysicalHost{value: val, isSet: true}
}

func (v NullablePhysicalHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


