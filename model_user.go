/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// User struct for User
type User struct {
	CreatedAt              *int32                 `json:"createdAt,omitempty"`
	UpdatedAt              *int32                 `json:"updatedAt,omitempty"`
	AdministeredClouds     *[]Cloud               `json:"administeredClouds,omitempty"`
	AdministeredVirtRealms *[]VirtualizationRealm `json:"administeredVirtRealms,omitempty"`
	Certificates           *[]Certificate         `json:"certificates,omitempty"`
	Comment                *string                `json:"comment,omitempty"`
	DefaultProject         *Project               `json:"defaultProject,omitempty"`
	Email                  *string                `json:"email,omitempty"`
	Firstname              *string                `json:"firstname,omitempty"`
	Id                     *int32                 `json:"id,omitempty"`
	Lastname               *string                `json:"lastname,omitempty"`
	LogEntries             *[]LogEntry            `json:"logEntries,omitempty"`
	Organization           *string                `json:"organization,omitempty"`
	ProjectCount           *int32                 `json:"projectCount,omitempty"`
	State                  *string                `json:"state,omitempty"`
	TermsOfServiceAccepted *bool                  `json:"termsOfServiceAccepted,omitempty"`
	Username               *string                `json:"username,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *User) GetCreatedAt() int32 {
	if o == nil || o.CreatedAt == nil {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCreatedAtOk() (*int32, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *User) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *User) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *User) GetUpdatedAt() int32 {
	if o == nil || o.UpdatedAt == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *User) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *User) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetAdministeredClouds returns the AdministeredClouds field value if set, zero value otherwise.
func (o *User) GetAdministeredClouds() []Cloud {
	if o == nil || o.AdministeredClouds == nil {
		var ret []Cloud
		return ret
	}
	return *o.AdministeredClouds
}

// GetAdministeredCloudsOk returns a tuple with the AdministeredClouds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAdministeredCloudsOk() (*[]Cloud, bool) {
	if o == nil || o.AdministeredClouds == nil {
		return nil, false
	}
	return o.AdministeredClouds, true
}

// HasAdministeredClouds returns a boolean if a field has been set.
func (o *User) HasAdministeredClouds() bool {
	if o != nil && o.AdministeredClouds != nil {
		return true
	}

	return false
}

// SetAdministeredClouds gets a reference to the given []Cloud and assigns it to the AdministeredClouds field.
func (o *User) SetAdministeredClouds(v []Cloud) {
	o.AdministeredClouds = &v
}

// GetAdministeredVirtRealms returns the AdministeredVirtRealms field value if set, zero value otherwise.
func (o *User) GetAdministeredVirtRealms() []VirtualizationRealm {
	if o == nil || o.AdministeredVirtRealms == nil {
		var ret []VirtualizationRealm
		return ret
	}
	return *o.AdministeredVirtRealms
}

// GetAdministeredVirtRealmsOk returns a tuple with the AdministeredVirtRealms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAdministeredVirtRealmsOk() (*[]VirtualizationRealm, bool) {
	if o == nil || o.AdministeredVirtRealms == nil {
		return nil, false
	}
	return o.AdministeredVirtRealms, true
}

// HasAdministeredVirtRealms returns a boolean if a field has been set.
func (o *User) HasAdministeredVirtRealms() bool {
	if o != nil && o.AdministeredVirtRealms != nil {
		return true
	}

	return false
}

// SetAdministeredVirtRealms gets a reference to the given []VirtualizationRealm and assigns it to the AdministeredVirtRealms field.
func (o *User) SetAdministeredVirtRealms(v []VirtualizationRealm) {
	o.AdministeredVirtRealms = &v
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *User) GetCertificates() []Certificate {
	if o == nil || o.Certificates == nil {
		var ret []Certificate
		return ret
	}
	return *o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCertificatesOk() (*[]Certificate, bool) {
	if o == nil || o.Certificates == nil {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *User) HasCertificates() bool {
	if o != nil && o.Certificates != nil {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []Certificate and assigns it to the Certificates field.
func (o *User) SetCertificates(v []Certificate) {
	o.Certificates = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *User) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *User) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *User) SetComment(v string) {
	o.Comment = &v
}

// GetDefaultProject returns the DefaultProject field value if set, zero value otherwise.
func (o *User) GetDefaultProject() Project {
	if o == nil || o.DefaultProject == nil {
		var ret Project
		return ret
	}
	return *o.DefaultProject
}

// GetDefaultProjectOk returns a tuple with the DefaultProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDefaultProjectOk() (*Project, bool) {
	if o == nil || o.DefaultProject == nil {
		return nil, false
	}
	return o.DefaultProject, true
}

// HasDefaultProject returns a boolean if a field has been set.
func (o *User) HasDefaultProject() bool {
	if o != nil && o.DefaultProject != nil {
		return true
	}

	return false
}

// SetDefaultProject gets a reference to the given Project and assigns it to the DefaultProject field.
func (o *User) SetDefaultProject(v Project) {
	o.DefaultProject = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *User) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *User) SetEmail(v string) {
	o.Email = &v
}

// GetFirstname returns the Firstname field value if set, zero value otherwise.
func (o *User) GetFirstname() string {
	if o == nil || o.Firstname == nil {
		var ret string
		return ret
	}
	return *o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFirstnameOk() (*string, bool) {
	if o == nil || o.Firstname == nil {
		return nil, false
	}
	return o.Firstname, true
}

// HasFirstname returns a boolean if a field has been set.
func (o *User) HasFirstname() bool {
	if o != nil && o.Firstname != nil {
		return true
	}

	return false
}

// SetFirstname gets a reference to the given string and assigns it to the Firstname field.
func (o *User) SetFirstname(v string) {
	o.Firstname = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *User) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *User) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *User) SetId(v int32) {
	o.Id = &v
}

// GetLastname returns the Lastname field value if set, zero value otherwise.
func (o *User) GetLastname() string {
	if o == nil || o.Lastname == nil {
		var ret string
		return ret
	}
	return *o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastnameOk() (*string, bool) {
	if o == nil || o.Lastname == nil {
		return nil, false
	}
	return o.Lastname, true
}

// HasLastname returns a boolean if a field has been set.
func (o *User) HasLastname() bool {
	if o != nil && o.Lastname != nil {
		return true
	}

	return false
}

// SetLastname gets a reference to the given string and assigns it to the Lastname field.
func (o *User) SetLastname(v string) {
	o.Lastname = &v
}

// GetLogEntries returns the LogEntries field value if set, zero value otherwise.
func (o *User) GetLogEntries() []LogEntry {
	if o == nil || o.LogEntries == nil {
		var ret []LogEntry
		return ret
	}
	return *o.LogEntries
}

// GetLogEntriesOk returns a tuple with the LogEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLogEntriesOk() (*[]LogEntry, bool) {
	if o == nil || o.LogEntries == nil {
		return nil, false
	}
	return o.LogEntries, true
}

// HasLogEntries returns a boolean if a field has been set.
func (o *User) HasLogEntries() bool {
	if o != nil && o.LogEntries != nil {
		return true
	}

	return false
}

// SetLogEntries gets a reference to the given []LogEntry and assigns it to the LogEntries field.
func (o *User) SetLogEntries(v []LogEntry) {
	o.LogEntries = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *User) GetOrganization() string {
	if o == nil || o.Organization == nil {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetOrganizationOk() (*string, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *User) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *User) SetOrganization(v string) {
	o.Organization = &v
}

// GetProjectCount returns the ProjectCount field value if set, zero value otherwise.
func (o *User) GetProjectCount() int32 {
	if o == nil || o.ProjectCount == nil {
		var ret int32
		return ret
	}
	return *o.ProjectCount
}

// GetProjectCountOk returns a tuple with the ProjectCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetProjectCountOk() (*int32, bool) {
	if o == nil || o.ProjectCount == nil {
		return nil, false
	}
	return o.ProjectCount, true
}

// HasProjectCount returns a boolean if a field has been set.
func (o *User) HasProjectCount() bool {
	if o != nil && o.ProjectCount != nil {
		return true
	}

	return false
}

// SetProjectCount gets a reference to the given int32 and assigns it to the ProjectCount field.
func (o *User) SetProjectCount(v int32) {
	o.ProjectCount = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *User) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *User) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *User) SetState(v string) {
	o.State = &v
}

// GetTermsOfServiceAccepted returns the TermsOfServiceAccepted field value if set, zero value otherwise.
func (o *User) GetTermsOfServiceAccepted() bool {
	if o == nil || o.TermsOfServiceAccepted == nil {
		var ret bool
		return ret
	}
	return *o.TermsOfServiceAccepted
}

// GetTermsOfServiceAcceptedOk returns a tuple with the TermsOfServiceAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTermsOfServiceAcceptedOk() (*bool, bool) {
	if o == nil || o.TermsOfServiceAccepted == nil {
		return nil, false
	}
	return o.TermsOfServiceAccepted, true
}

// HasTermsOfServiceAccepted returns a boolean if a field has been set.
func (o *User) HasTermsOfServiceAccepted() bool {
	if o != nil && o.TermsOfServiceAccepted != nil {
		return true
	}

	return false
}

// SetTermsOfServiceAccepted gets a reference to the given bool and assigns it to the TermsOfServiceAccepted field.
func (o *User) SetTermsOfServiceAccepted(v bool) {
	o.TermsOfServiceAccepted = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *User) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *User) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *User) SetUsername(v string) {
	o.Username = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.AdministeredClouds != nil {
		toSerialize["administeredClouds"] = o.AdministeredClouds
	}
	if o.AdministeredVirtRealms != nil {
		toSerialize["administeredVirtRealms"] = o.AdministeredVirtRealms
	}
	if o.Certificates != nil {
		toSerialize["certificates"] = o.Certificates
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.DefaultProject != nil {
		toSerialize["defaultProject"] = o.DefaultProject
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Firstname != nil {
		toSerialize["firstname"] = o.Firstname
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Lastname != nil {
		toSerialize["lastname"] = o.Lastname
	}
	if o.LogEntries != nil {
		toSerialize["logEntries"] = o.LogEntries
	}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	if o.ProjectCount != nil {
		toSerialize["projectCount"] = o.ProjectCount
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.TermsOfServiceAccepted != nil {
		toSerialize["termsOfServiceAccepted"] = o.TermsOfServiceAccepted
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
