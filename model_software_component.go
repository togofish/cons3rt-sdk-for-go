/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gocons3rt

import (
	"encoding/json"
)

// SoftwareComponent struct for SoftwareComponent
type SoftwareComponent struct {
	Asset Asset `json:"asset"`
	Id *int32 `json:"id,omitempty"`
	LoadOrder *int32 `json:"loadOrder,omitempty"`
	RebootDelay *int32 `json:"rebootDelay,omitempty"`
	RebootRequired *bool `json:"rebootRequired,omitempty"`
}

// NewSoftwareComponent instantiates a new SoftwareComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwareComponent(asset Asset) *SoftwareComponent {
	this := SoftwareComponent{}
	this.Asset = asset
	return &this
}

// NewSoftwareComponentWithDefaults instantiates a new SoftwareComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwareComponentWithDefaults() *SoftwareComponent {
	this := SoftwareComponent{}
	return &this
}

// GetAsset returns the Asset field value
func (o *SoftwareComponent) GetAsset() Asset {
	if o == nil {
		var ret Asset
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *SoftwareComponent) GetAssetOk() (*Asset, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *SoftwareComponent) SetAsset(v Asset) {
	o.Asset = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SoftwareComponent) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareComponent) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SoftwareComponent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SoftwareComponent) SetId(v int32) {
	o.Id = &v
}

// GetLoadOrder returns the LoadOrder field value if set, zero value otherwise.
func (o *SoftwareComponent) GetLoadOrder() int32 {
	if o == nil || o.LoadOrder == nil {
		var ret int32
		return ret
	}
	return *o.LoadOrder
}

// GetLoadOrderOk returns a tuple with the LoadOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareComponent) GetLoadOrderOk() (*int32, bool) {
	if o == nil || o.LoadOrder == nil {
		return nil, false
	}
	return o.LoadOrder, true
}

// HasLoadOrder returns a boolean if a field has been set.
func (o *SoftwareComponent) HasLoadOrder() bool {
	if o != nil && o.LoadOrder != nil {
		return true
	}

	return false
}

// SetLoadOrder gets a reference to the given int32 and assigns it to the LoadOrder field.
func (o *SoftwareComponent) SetLoadOrder(v int32) {
	o.LoadOrder = &v
}

// GetRebootDelay returns the RebootDelay field value if set, zero value otherwise.
func (o *SoftwareComponent) GetRebootDelay() int32 {
	if o == nil || o.RebootDelay == nil {
		var ret int32
		return ret
	}
	return *o.RebootDelay
}

// GetRebootDelayOk returns a tuple with the RebootDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareComponent) GetRebootDelayOk() (*int32, bool) {
	if o == nil || o.RebootDelay == nil {
		return nil, false
	}
	return o.RebootDelay, true
}

// HasRebootDelay returns a boolean if a field has been set.
func (o *SoftwareComponent) HasRebootDelay() bool {
	if o != nil && o.RebootDelay != nil {
		return true
	}

	return false
}

// SetRebootDelay gets a reference to the given int32 and assigns it to the RebootDelay field.
func (o *SoftwareComponent) SetRebootDelay(v int32) {
	o.RebootDelay = &v
}

// GetRebootRequired returns the RebootRequired field value if set, zero value otherwise.
func (o *SoftwareComponent) GetRebootRequired() bool {
	if o == nil || o.RebootRequired == nil {
		var ret bool
		return ret
	}
	return *o.RebootRequired
}

// GetRebootRequiredOk returns a tuple with the RebootRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareComponent) GetRebootRequiredOk() (*bool, bool) {
	if o == nil || o.RebootRequired == nil {
		return nil, false
	}
	return o.RebootRequired, true
}

// HasRebootRequired returns a boolean if a field has been set.
func (o *SoftwareComponent) HasRebootRequired() bool {
	if o != nil && o.RebootRequired != nil {
		return true
	}

	return false
}

// SetRebootRequired gets a reference to the given bool and assigns it to the RebootRequired field.
func (o *SoftwareComponent) SetRebootRequired(v bool) {
	o.RebootRequired = &v
}

func (o SoftwareComponent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["asset"] = o.Asset
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LoadOrder != nil {
		toSerialize["loadOrder"] = o.LoadOrder
	}
	if o.RebootDelay != nil {
		toSerialize["rebootDelay"] = o.RebootDelay
	}
	if o.RebootRequired != nil {
		toSerialize["rebootRequired"] = o.RebootRequired
	}
	return json.Marshal(toSerialize)
}

type NullableSoftwareComponent struct {
	value *SoftwareComponent
	isSet bool
}

func (v NullableSoftwareComponent) Get() *SoftwareComponent {
	return v.value
}

func (v *NullableSoftwareComponent) Set(val *SoftwareComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareComponent(val *SoftwareComponent) *NullableSoftwareComponent {
	return &NullableSoftwareComponent{value: val, isSet: true}
}

func (v NullableSoftwareComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


