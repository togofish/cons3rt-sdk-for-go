/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompositionHostOption struct for CompositionHostOption
type CompositionHostOption struct {
	AdditionalDisks      *[]Disk             `json:"additionalDisks,omitempty"`
	BatchSoftwareInstall *bool               `json:"batchSoftwareInstall,omitempty"`
	InstanceTypeName     *string             `json:"instanceTypeName,omitempty"`
	NetworkInterfaces    *[]NetworkInterface `json:"networkInterfaces,omitempty"`
	Cpus                 *int32              `json:"cpus,omitempty"`
	Ram                  *int32              `json:"ram,omitempty"`
	SystemRole           string              `json:"systemRole"`
	TemplateName         *string             `json:"templateName,omitempty"`
}

// NewCompositionHostOption instantiates a new CompositionHostOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompositionHostOption(systemRole string) *CompositionHostOption {
	this := CompositionHostOption{}
	this.SystemRole = systemRole
	return &this
}

// NewCompositionHostOptionWithDefaults instantiates a new CompositionHostOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompositionHostOptionWithDefaults() *CompositionHostOption {
	this := CompositionHostOption{}
	return &this
}

// GetAdditionalDisks returns the AdditionalDisks field value if set, zero value otherwise.
func (o *CompositionHostOption) GetAdditionalDisks() []Disk {
	if o == nil || o.AdditionalDisks == nil {
		var ret []Disk
		return ret
	}
	return *o.AdditionalDisks
}

// GetAdditionalDisksOk returns a tuple with the AdditionalDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionHostOption) GetAdditionalDisksOk() (*[]Disk, bool) {
	if o == nil || o.AdditionalDisks == nil {
		return nil, false
	}
	return o.AdditionalDisks, true
}

// HasAdditionalDisks returns a boolean if a field has been set.
func (o *CompositionHostOption) HasAdditionalDisks() bool {
	if o != nil && o.AdditionalDisks != nil {
		return true
	}

	return false
}

// SetAdditionalDisks gets a reference to the given []Disk and assigns it to the AdditionalDisks field.
func (o *CompositionHostOption) SetAdditionalDisks(v []Disk) {
	o.AdditionalDisks = &v
}

// GetBatchSoftwareInstall returns the BatchSoftwareInstall field value if set, zero value otherwise.
func (o *CompositionHostOption) GetBatchSoftwareInstall() bool {
	if o == nil || o.BatchSoftwareInstall == nil {
		var ret bool
		return ret
	}
	return *o.BatchSoftwareInstall
}

// GetBatchSoftwareInstallOk returns a tuple with the BatchSoftwareInstall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionHostOption) GetBatchSoftwareInstallOk() (*bool, bool) {
	if o == nil || o.BatchSoftwareInstall == nil {
		return nil, false
	}
	return o.BatchSoftwareInstall, true
}

// HasBatchSoftwareInstall returns a boolean if a field has been set.
func (o *CompositionHostOption) HasBatchSoftwareInstall() bool {
	if o != nil && o.BatchSoftwareInstall != nil {
		return true
	}

	return false
}

// SetBatchSoftwareInstall gets a reference to the given bool and assigns it to the BatchSoftwareInstall field.
func (o *CompositionHostOption) SetBatchSoftwareInstall(v bool) {
	o.BatchSoftwareInstall = &v
}

// GetInstanceTypeName returns the InstanceTypeName field value if set, zero value otherwise.
func (o *CompositionHostOption) GetInstanceTypeName() string {
	if o == nil || o.InstanceTypeName == nil {
		var ret string
		return ret
	}
	return *o.InstanceTypeName
}

// GetInstanceTypeNameOk returns a tuple with the InstanceTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionHostOption) GetInstanceTypeNameOk() (*string, bool) {
	if o == nil || o.InstanceTypeName == nil {
		return nil, false
	}
	return o.InstanceTypeName, true
}

// HasInstanceTypeName returns a boolean if a field has been set.
func (o *CompositionHostOption) HasInstanceTypeName() bool {
	if o != nil && o.InstanceTypeName != nil {
		return true
	}

	return false
}

// SetInstanceTypeName gets a reference to the given string and assigns it to the InstanceTypeName field.
func (o *CompositionHostOption) SetInstanceTypeName(v string) {
	o.InstanceTypeName = &v
}

// GetNetworkInterfaces returns the NetworkInterfaces field value if set, zero value otherwise.
func (o *CompositionHostOption) GetNetworkInterfaces() []NetworkInterface {
	if o == nil || o.NetworkInterfaces == nil {
		var ret []NetworkInterface
		return ret
	}
	return *o.NetworkInterfaces
}

// GetNetworkInterfacesOk returns a tuple with the NetworkInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionHostOption) GetNetworkInterfacesOk() (*[]NetworkInterface, bool) {
	if o == nil || o.NetworkInterfaces == nil {
		return nil, false
	}
	return o.NetworkInterfaces, true
}

// HasNetworkInterfaces returns a boolean if a field has been set.
func (o *CompositionHostOption) HasNetworkInterfaces() bool {
	if o != nil && o.NetworkInterfaces != nil {
		return true
	}

	return false
}

// SetNetworkInterfaces gets a reference to the given []NetworkInterface and assigns it to the NetworkInterfaces field.
func (o *CompositionHostOption) SetNetworkInterfaces(v []NetworkInterface) {
	o.NetworkInterfaces = &v
}

// GetCpus returns the Cpus field value if set, zero value otherwise.
func (o *CompositionHostOption) GetCpus() int32 {
	if o == nil || o.Cpus == nil {
		var ret int32
		return ret
	}
	return *o.Cpus
}

// GetCpusOk returns a tuple with the Cpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionHostOption) GetCpusOk() (*int32, bool) {
	if o == nil || o.Cpus == nil {
		return nil, false
	}
	return o.Cpus, true
}

// HasCpus returns a boolean if a field has been set.
func (o *CompositionHostOption) HasCpus() bool {
	if o != nil && o.Cpus != nil {
		return true
	}

	return false
}

// SetCpus gets a reference to the given int32 and assigns it to the Cpus field.
func (o *CompositionHostOption) SetCpus(v int32) {
	o.Cpus = &v
}

// GetRam returns the Ram field value if set, zero value otherwise.
func (o *CompositionHostOption) GetRam() int32 {
	if o == nil || o.Ram == nil {
		var ret int32
		return ret
	}
	return *o.Ram
}

// GetRamOk returns a tuple with the Ram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionHostOption) GetRamOk() (*int32, bool) {
	if o == nil || o.Ram == nil {
		return nil, false
	}
	return o.Ram, true
}

// HasRam returns a boolean if a field has been set.
func (o *CompositionHostOption) HasRam() bool {
	if o != nil && o.Ram != nil {
		return true
	}

	return false
}

// SetRam gets a reference to the given int32 and assigns it to the Ram field.
func (o *CompositionHostOption) SetRam(v int32) {
	o.Ram = &v
}

// GetSystemRole returns the SystemRole field value
func (o *CompositionHostOption) GetSystemRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SystemRole
}

// GetSystemRoleOk returns a tuple with the SystemRole field value
// and a boolean to check if the value has been set.
func (o *CompositionHostOption) GetSystemRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemRole, true
}

// SetSystemRole sets field value
func (o *CompositionHostOption) SetSystemRole(v string) {
	o.SystemRole = v
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise.
func (o *CompositionHostOption) GetTemplateName() string {
	if o == nil || o.TemplateName == nil {
		var ret string
		return ret
	}
	return *o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositionHostOption) GetTemplateNameOk() (*string, bool) {
	if o == nil || o.TemplateName == nil {
		return nil, false
	}
	return o.TemplateName, true
}

// HasTemplateName returns a boolean if a field has been set.
func (o *CompositionHostOption) HasTemplateName() bool {
	if o != nil && o.TemplateName != nil {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given string and assigns it to the TemplateName field.
func (o *CompositionHostOption) SetTemplateName(v string) {
	o.TemplateName = &v
}

func (o CompositionHostOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalDisks != nil {
		toSerialize["additionalDisks"] = o.AdditionalDisks
	}
	if o.BatchSoftwareInstall != nil {
		toSerialize["batchSoftwareInstall"] = o.BatchSoftwareInstall
	}
	if o.InstanceTypeName != nil {
		toSerialize["instanceTypeName"] = o.InstanceTypeName
	}
	if o.NetworkInterfaces != nil {
		toSerialize["networkInterfaces"] = o.NetworkInterfaces
	}
	if o.Cpus != nil {
		toSerialize["cpus"] = o.Cpus
	}
	if o.Ram != nil {
		toSerialize["ram"] = o.Ram
	}
	if true {
		toSerialize["systemRole"] = o.SystemRole
	}
	if o.TemplateName != nil {
		toSerialize["templateName"] = o.TemplateName
	}
	return json.Marshal(toSerialize)
}

type NullableCompositionHostOption struct {
	value *CompositionHostOption
	isSet bool
}

func (v NullableCompositionHostOption) Get() *CompositionHostOption {
	return v.value
}

func (v *NullableCompositionHostOption) Set(val *CompositionHostOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCompositionHostOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCompositionHostOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompositionHostOption(val *CompositionHostOption) *NullableCompositionHostOption {
	return &NullableCompositionHostOption{value: val, isSet: true}
}

func (v NullableCompositionHostOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompositionHostOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
