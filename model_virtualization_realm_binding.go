/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// VirtualizationRealmBinding struct for VirtualizationRealmBinding
type VirtualizationRealmBinding struct {
	VirtualizationRealm MinimalVirtualizationRealm `json:"virtualizationRealm"`
	TemplateBindings    []HostBinding              `json:"templateBindings"`
}

// NewVirtualizationRealmBinding instantiates a new VirtualizationRealmBinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationRealmBinding(virtualizationRealm MinimalVirtualizationRealm, templateBindings []HostBinding) *VirtualizationRealmBinding {
	this := VirtualizationRealmBinding{}
	this.VirtualizationRealm = virtualizationRealm
	this.TemplateBindings = templateBindings
	return &this
}

// NewVirtualizationRealmBindingWithDefaults instantiates a new VirtualizationRealmBinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationRealmBindingWithDefaults() *VirtualizationRealmBinding {
	this := VirtualizationRealmBinding{}
	return &this
}

// GetVirtualizationRealm returns the VirtualizationRealm field value
func (o *VirtualizationRealmBinding) GetVirtualizationRealm() MinimalVirtualizationRealm {
	if o == nil {
		var ret MinimalVirtualizationRealm
		return ret
	}

	return o.VirtualizationRealm
}

// GetVirtualizationRealmOk returns a tuple with the VirtualizationRealm field value
// and a boolean to check if the value has been set.
func (o *VirtualizationRealmBinding) GetVirtualizationRealmOk() (*MinimalVirtualizationRealm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualizationRealm, true
}

// SetVirtualizationRealm sets field value
func (o *VirtualizationRealmBinding) SetVirtualizationRealm(v MinimalVirtualizationRealm) {
	o.VirtualizationRealm = v
}

// GetTemplateBindings returns the TemplateBindings field value
func (o *VirtualizationRealmBinding) GetTemplateBindings() []HostBinding {
	if o == nil {
		var ret []HostBinding
		return ret
	}

	return o.TemplateBindings
}

// GetTemplateBindingsOk returns a tuple with the TemplateBindings field value
// and a boolean to check if the value has been set.
func (o *VirtualizationRealmBinding) GetTemplateBindingsOk() (*[]HostBinding, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TemplateBindings, true
}

// SetTemplateBindings sets field value
func (o *VirtualizationRealmBinding) SetTemplateBindings(v []HostBinding) {
	o.TemplateBindings = v
}

func (o VirtualizationRealmBinding) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["virtualizationRealm"] = o.VirtualizationRealm
	}
	if true {
		toSerialize["templateBindings"] = o.TemplateBindings
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualizationRealmBinding struct {
	value *VirtualizationRealmBinding
	isSet bool
}

func (v NullableVirtualizationRealmBinding) Get() *VirtualizationRealmBinding {
	return v.value
}

func (v *NullableVirtualizationRealmBinding) Set(val *VirtualizationRealmBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationRealmBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationRealmBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationRealmBinding(val *VirtualizationRealmBinding) *NullableVirtualizationRealmBinding {
	return &NullableVirtualizationRealmBinding{value: val, isSet: true}
}

func (v NullableVirtualizationRealmBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationRealmBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
