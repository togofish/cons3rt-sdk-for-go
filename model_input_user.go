/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputUser struct for InputUser
type InputUser struct {
	Username  string `json:"username"`
	Email     string `json:"email"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
}

// NewInputUser instantiates a new InputUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputUser(username string, email string, firstname string, lastname string) *InputUser {
	this := InputUser{}
	this.Username = username
	this.Email = email
	this.Firstname = firstname
	this.Lastname = lastname
	return &this
}

// NewInputUserWithDefaults instantiates a new InputUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputUserWithDefaults() *InputUser {
	this := InputUser{}
	return &this
}

// GetUsername returns the Username field value
func (o *InputUser) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *InputUser) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *InputUser) SetUsername(v string) {
	o.Username = v
}

// GetEmail returns the Email field value
func (o *InputUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *InputUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *InputUser) SetEmail(v string) {
	o.Email = v
}

// GetFirstname returns the Firstname field value
func (o *InputUser) GetFirstname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value
// and a boolean to check if the value has been set.
func (o *InputUser) GetFirstnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Firstname, true
}

// SetFirstname sets field value
func (o *InputUser) SetFirstname(v string) {
	o.Firstname = v
}

// GetLastname returns the Lastname field value
func (o *InputUser) GetLastname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value
// and a boolean to check if the value has been set.
func (o *InputUser) GetLastnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lastname, true
}

// SetLastname sets field value
func (o *InputUser) SetLastname(v string) {
	o.Lastname = v
}

func (o InputUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["firstname"] = o.Firstname
	}
	if true {
		toSerialize["lastname"] = o.Lastname
	}
	return json.Marshal(toSerialize)
}

type NullableInputUser struct {
	value *InputUser
	isSet bool
}

func (v NullableInputUser) Get() *InputUser {
	return v.value
}

func (v *NullableInputUser) Set(val *InputUser) {
	v.value = val
	v.isSet = true
}

func (v NullableInputUser) IsSet() bool {
	return v.isSet
}

func (v *NullableInputUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputUser(val *InputUser) *NullableInputUser {
	return &NullableInputUser{value: val, isSet: true}
}

func (v NullableInputUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
