/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MinimalAbstractComponent struct for MinimalAbstractComponent
type MinimalAbstractComponent struct {
	Asset     MinimalAsset `json:"asset"`
	Id        *int32       `json:"id,omitempty"`
	LoadOrder *int32       `json:"loadOrder,omitempty"`
	Subtype   string       `json:"subtype"`
}

// NewMinimalAbstractComponent instantiates a new MinimalAbstractComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinimalAbstractComponent(asset MinimalAsset, subtype string) *MinimalAbstractComponent {
	this := MinimalAbstractComponent{}
	this.Asset = asset
	this.Subtype = subtype
	return &this
}

// NewMinimalAbstractComponentWithDefaults instantiates a new MinimalAbstractComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinimalAbstractComponentWithDefaults() *MinimalAbstractComponent {
	this := MinimalAbstractComponent{}
	return &this
}

// GetAsset returns the Asset field value
func (o *MinimalAbstractComponent) GetAsset() MinimalAsset {
	if o == nil {
		var ret MinimalAsset
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *MinimalAbstractComponent) GetAssetOk() (*MinimalAsset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *MinimalAbstractComponent) SetAsset(v MinimalAsset) {
	o.Asset = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MinimalAbstractComponent) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalAbstractComponent) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MinimalAbstractComponent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MinimalAbstractComponent) SetId(v int32) {
	o.Id = &v
}

// GetLoadOrder returns the LoadOrder field value if set, zero value otherwise.
func (o *MinimalAbstractComponent) GetLoadOrder() int32 {
	if o == nil || o.LoadOrder == nil {
		var ret int32
		return ret
	}
	return *o.LoadOrder
}

// GetLoadOrderOk returns a tuple with the LoadOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalAbstractComponent) GetLoadOrderOk() (*int32, bool) {
	if o == nil || o.LoadOrder == nil {
		return nil, false
	}
	return o.LoadOrder, true
}

// HasLoadOrder returns a boolean if a field has been set.
func (o *MinimalAbstractComponent) HasLoadOrder() bool {
	if o != nil && o.LoadOrder != nil {
		return true
	}

	return false
}

// SetLoadOrder gets a reference to the given int32 and assigns it to the LoadOrder field.
func (o *MinimalAbstractComponent) SetLoadOrder(v int32) {
	o.LoadOrder = &v
}

// GetSubtype returns the Subtype field value
func (o *MinimalAbstractComponent) GetSubtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
func (o *MinimalAbstractComponent) GetSubtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtype, true
}

// SetSubtype sets field value
func (o *MinimalAbstractComponent) SetSubtype(v string) {
	o.Subtype = v
}

func (o MinimalAbstractComponent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["asset"] = o.Asset
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LoadOrder != nil {
		toSerialize["loadOrder"] = o.LoadOrder
	}
	if true {
		toSerialize["subtype"] = o.Subtype
	}
	return json.Marshal(toSerialize)
}

type NullableMinimalAbstractComponent struct {
	value *MinimalAbstractComponent
	isSet bool
}

func (v NullableMinimalAbstractComponent) Get() *MinimalAbstractComponent {
	return v.value
}

func (v *NullableMinimalAbstractComponent) Set(val *MinimalAbstractComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimalAbstractComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimalAbstractComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimalAbstractComponent(val *MinimalAbstractComponent) *NullableMinimalAbstractComponent {
	return &NullableMinimalAbstractComponent{value: val, isSet: true}
}

func (v NullableMinimalAbstractComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimalAbstractComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
