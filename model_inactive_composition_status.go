/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// InactiveCompositionStatus struct for InactiveCompositionStatus
type InactiveCompositionStatus struct {
	ScenarioHosts *[]MinimalScenarioHost `json:"scenarioHosts,omitempty"`
	Type          string
}

// NewInactiveCompositionStatus instantiates a new InactiveCompositionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInactiveCompositionStatus(type_ string) *InactiveCompositionStatus {
	this := InactiveCompositionStatus{}
	this.Type = type_
	return &this
}

// NewInactiveCompositionStatusWithDefaults instantiates a new InactiveCompositionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInactiveCompositionStatusWithDefaults() *InactiveCompositionStatus {
	this := InactiveCompositionStatus{}
	return &this
}

// GetScenarioHosts returns the ScenarioHosts field value if set, zero value otherwise.
func (o *InactiveCompositionStatus) GetScenarioHosts() []MinimalScenarioHost {
	if o == nil || o.ScenarioHosts == nil {
		var ret []MinimalScenarioHost
		return ret
	}
	return *o.ScenarioHosts
}

// GetScenarioHostsOk returns a tuple with the ScenarioHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InactiveCompositionStatus) GetScenarioHostsOk() (*[]MinimalScenarioHost, bool) {
	if o == nil || o.ScenarioHosts == nil {
		return nil, false
	}
	return o.ScenarioHosts, true
}

// HasScenarioHosts returns a boolean if a field has been set.
func (o *InactiveCompositionStatus) HasScenarioHosts() bool {
	if o != nil && o.ScenarioHosts != nil {
		return true
	}

	return false
}

// SetScenarioHosts gets a reference to the given []MinimalScenarioHost and assigns it to the ScenarioHosts field.
func (o *InactiveCompositionStatus) SetScenarioHosts(v []MinimalScenarioHost) {
	o.ScenarioHosts = &v
}

func (o InactiveCompositionStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScenarioHosts != nil {
		toSerialize["scenarioHosts"] = o.ScenarioHosts
	}
	return json.Marshal(toSerialize)
}

type NullableInactiveCompositionStatus struct {
	value *InactiveCompositionStatus
	isSet bool
}

func (v NullableInactiveCompositionStatus) Get() *InactiveCompositionStatus {
	return v.value
}

func (v *NullableInactiveCompositionStatus) Set(val *InactiveCompositionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInactiveCompositionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInactiveCompositionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInactiveCompositionStatus(val *InactiveCompositionStatus) *NullableInactiveCompositionStatus {
	return &NullableInactiveCompositionStatus{value: val, isSet: true}
}

func (v NullableInactiveCompositionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInactiveCompositionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
