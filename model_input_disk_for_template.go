/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputDiskForTemplate struct for InputDiskForTemplate
type InputDiskForTemplate struct {
	CapacityInMegabytes int32 `json:"capacityInMegabytes"`
	IsAdditionalDisk    *bool `json:"isAdditionalDisk,omitempty"`
	IsBootDisk          *bool `json:"isBootDisk,omitempty"`
}

// NewInputDiskForTemplate instantiates a new InputDiskForTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputDiskForTemplate(capacityInMegabytes int32) *InputDiskForTemplate {
	this := InputDiskForTemplate{}
	this.CapacityInMegabytes = capacityInMegabytes
	return &this
}

// NewInputDiskForTemplateWithDefaults instantiates a new InputDiskForTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputDiskForTemplateWithDefaults() *InputDiskForTemplate {
	this := InputDiskForTemplate{}
	return &this
}

// GetCapacityInMegabytes returns the CapacityInMegabytes field value
func (o *InputDiskForTemplate) GetCapacityInMegabytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CapacityInMegabytes
}

// GetCapacityInMegabytesOk returns a tuple with the CapacityInMegabytes field value
// and a boolean to check if the value has been set.
func (o *InputDiskForTemplate) GetCapacityInMegabytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CapacityInMegabytes, true
}

// SetCapacityInMegabytes sets field value
func (o *InputDiskForTemplate) SetCapacityInMegabytes(v int32) {
	o.CapacityInMegabytes = v
}

// GetIsAdditionalDisk returns the IsAdditionalDisk field value if set, zero value otherwise.
func (o *InputDiskForTemplate) GetIsAdditionalDisk() bool {
	if o == nil || o.IsAdditionalDisk == nil {
		var ret bool
		return ret
	}
	return *o.IsAdditionalDisk
}

// GetIsAdditionalDiskOk returns a tuple with the IsAdditionalDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputDiskForTemplate) GetIsAdditionalDiskOk() (*bool, bool) {
	if o == nil || o.IsAdditionalDisk == nil {
		return nil, false
	}
	return o.IsAdditionalDisk, true
}

// HasIsAdditionalDisk returns a boolean if a field has been set.
func (o *InputDiskForTemplate) HasIsAdditionalDisk() bool {
	if o != nil && o.IsAdditionalDisk != nil {
		return true
	}

	return false
}

// SetIsAdditionalDisk gets a reference to the given bool and assigns it to the IsAdditionalDisk field.
func (o *InputDiskForTemplate) SetIsAdditionalDisk(v bool) {
	o.IsAdditionalDisk = &v
}

// GetIsBootDisk returns the IsBootDisk field value if set, zero value otherwise.
func (o *InputDiskForTemplate) GetIsBootDisk() bool {
	if o == nil || o.IsBootDisk == nil {
		var ret bool
		return ret
	}
	return *o.IsBootDisk
}

// GetIsBootDiskOk returns a tuple with the IsBootDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputDiskForTemplate) GetIsBootDiskOk() (*bool, bool) {
	if o == nil || o.IsBootDisk == nil {
		return nil, false
	}
	return o.IsBootDisk, true
}

// HasIsBootDisk returns a boolean if a field has been set.
func (o *InputDiskForTemplate) HasIsBootDisk() bool {
	if o != nil && o.IsBootDisk != nil {
		return true
	}

	return false
}

// SetIsBootDisk gets a reference to the given bool and assigns it to the IsBootDisk field.
func (o *InputDiskForTemplate) SetIsBootDisk(v bool) {
	o.IsBootDisk = &v
}

func (o InputDiskForTemplate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["capacityInMegabytes"] = o.CapacityInMegabytes
	}
	if o.IsAdditionalDisk != nil {
		toSerialize["isAdditionalDisk"] = o.IsAdditionalDisk
	}
	if o.IsBootDisk != nil {
		toSerialize["isBootDisk"] = o.IsBootDisk
	}
	return json.Marshal(toSerialize)
}

type NullableInputDiskForTemplate struct {
	value *InputDiskForTemplate
	isSet bool
}

func (v NullableInputDiskForTemplate) Get() *InputDiskForTemplate {
	return v.value
}

func (v *NullableInputDiskForTemplate) Set(val *InputDiskForTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableInputDiskForTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableInputDiskForTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputDiskForTemplate(val *InputDiskForTemplate) *NullableInputDiskForTemplate {
	return &NullableInputDiskForTemplate{value: val, isSet: true}
}

func (v NullableInputDiskForTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputDiskForTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
