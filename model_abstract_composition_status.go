/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AbstractCompositionStatus struct for AbstractCompositionStatus
type AbstractCompositionStatus struct {
	Id          *int32  `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	ProjectId   *int32  `json:"projectId,omitempty"`
	Stoppable   *bool   `json:"stoppable,omitempty"`
	Connectable *bool   `json:"connectable,omitempty"`
	Startable   *bool   `json:"startable,omitempty"`
	Type        string  `json:"type"`
}

// NewAbstractCompositionStatus instantiates a new AbstractCompositionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractCompositionStatus(type_ string) *AbstractCompositionStatus {
	this := AbstractCompositionStatus{}
	this.Type = type_
	return &this
}

// NewAbstractCompositionStatusWithDefaults instantiates a new AbstractCompositionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractCompositionStatusWithDefaults() *AbstractCompositionStatus {
	this := AbstractCompositionStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AbstractCompositionStatus) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractCompositionStatus) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AbstractCompositionStatus) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AbstractCompositionStatus) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AbstractCompositionStatus) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractCompositionStatus) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AbstractCompositionStatus) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AbstractCompositionStatus) SetName(v string) {
	o.Name = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *AbstractCompositionStatus) GetProjectId() int32 {
	if o == nil || o.ProjectId == nil {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractCompositionStatus) GetProjectIdOk() (*int32, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *AbstractCompositionStatus) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *AbstractCompositionStatus) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetStoppable returns the Stoppable field value if set, zero value otherwise.
func (o *AbstractCompositionStatus) GetStoppable() bool {
	if o == nil || o.Stoppable == nil {
		var ret bool
		return ret
	}
	return *o.Stoppable
}

// GetStoppableOk returns a tuple with the Stoppable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractCompositionStatus) GetStoppableOk() (*bool, bool) {
	if o == nil || o.Stoppable == nil {
		return nil, false
	}
	return o.Stoppable, true
}

// HasStoppable returns a boolean if a field has been set.
func (o *AbstractCompositionStatus) HasStoppable() bool {
	if o != nil && o.Stoppable != nil {
		return true
	}

	return false
}

// SetStoppable gets a reference to the given bool and assigns it to the Stoppable field.
func (o *AbstractCompositionStatus) SetStoppable(v bool) {
	o.Stoppable = &v
}

// GetConnectable returns the Connectable field value if set, zero value otherwise.
func (o *AbstractCompositionStatus) GetConnectable() bool {
	if o == nil || o.Connectable == nil {
		var ret bool
		return ret
	}
	return *o.Connectable
}

// GetConnectableOk returns a tuple with the Connectable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractCompositionStatus) GetConnectableOk() (*bool, bool) {
	if o == nil || o.Connectable == nil {
		return nil, false
	}
	return o.Connectable, true
}

// HasConnectable returns a boolean if a field has been set.
func (o *AbstractCompositionStatus) HasConnectable() bool {
	if o != nil && o.Connectable != nil {
		return true
	}

	return false
}

// SetConnectable gets a reference to the given bool and assigns it to the Connectable field.
func (o *AbstractCompositionStatus) SetConnectable(v bool) {
	o.Connectable = &v
}

// GetStartable returns the Startable field value if set, zero value otherwise.
func (o *AbstractCompositionStatus) GetStartable() bool {
	if o == nil || o.Startable == nil {
		var ret bool
		return ret
	}
	return *o.Startable
}

// GetStartableOk returns a tuple with the Startable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractCompositionStatus) GetStartableOk() (*bool, bool) {
	if o == nil || o.Startable == nil {
		return nil, false
	}
	return o.Startable, true
}

// HasStartable returns a boolean if a field has been set.
func (o *AbstractCompositionStatus) HasStartable() bool {
	if o != nil && o.Startable != nil {
		return true
	}

	return false
}

// SetStartable gets a reference to the given bool and assigns it to the Startable field.
func (o *AbstractCompositionStatus) SetStartable(v bool) {
	o.Startable = &v
}

// GetType returns the Type field value
func (o *AbstractCompositionStatus) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AbstractCompositionStatus) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AbstractCompositionStatus) SetType(v string) {
	o.Type = v
}

func (o AbstractCompositionStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.Stoppable != nil {
		toSerialize["stoppable"] = o.Stoppable
	}
	if o.Connectable != nil {
		toSerialize["connectable"] = o.Connectable
	}
	if o.Startable != nil {
		toSerialize["startable"] = o.Startable
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAbstractCompositionStatus struct {
	value *AbstractCompositionStatus
	isSet bool
}

func (v NullableAbstractCompositionStatus) Get() *AbstractCompositionStatus {
	return v.value
}

func (v *NullableAbstractCompositionStatus) Set(val *AbstractCompositionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractCompositionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractCompositionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractCompositionStatus(val *AbstractCompositionStatus) *NullableAbstractCompositionStatus {
	return &NullableAbstractCompositionStatus{value: val, isSet: true}
}

func (v NullableAbstractCompositionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractCompositionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
