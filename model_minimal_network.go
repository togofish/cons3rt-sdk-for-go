/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// MinimalNetwork struct for MinimalNetwork
type MinimalNetwork struct {
	Id                *int32  `json:"id,omitempty"`
	Isolated          *bool   `json:"isolated,omitempty"`
	BoundaryIpAddress *string `json:"boundaryIpAddress,omitempty"`
	Cidr              *string `json:"cidr,omitempty"`
	Gateway           *string `json:"gateway,omitempty"`
	Identifier        *string `json:"identifier,omitempty"`
	NetworkFunction   *string `json:"networkFunction,omitempty"`
	Name              *string `json:"name,omitempty"`
}

// NewMinimalNetwork instantiates a new MinimalNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinimalNetwork() *MinimalNetwork {
	this := MinimalNetwork{}
	return &this
}

// NewMinimalNetworkWithDefaults instantiates a new MinimalNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinimalNetworkWithDefaults() *MinimalNetwork {
	this := MinimalNetwork{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MinimalNetwork) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalNetwork) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MinimalNetwork) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MinimalNetwork) SetId(v int32) {
	o.Id = &v
}

// GetIsolated returns the Isolated field value if set, zero value otherwise.
func (o *MinimalNetwork) GetIsolated() bool {
	if o == nil || o.Isolated == nil {
		var ret bool
		return ret
	}
	return *o.Isolated
}

// GetIsolatedOk returns a tuple with the Isolated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalNetwork) GetIsolatedOk() (*bool, bool) {
	if o == nil || o.Isolated == nil {
		return nil, false
	}
	return o.Isolated, true
}

// HasIsolated returns a boolean if a field has been set.
func (o *MinimalNetwork) HasIsolated() bool {
	if o != nil && o.Isolated != nil {
		return true
	}

	return false
}

// SetIsolated gets a reference to the given bool and assigns it to the Isolated field.
func (o *MinimalNetwork) SetIsolated(v bool) {
	o.Isolated = &v
}

// GetBoundaryIpAddress returns the BoundaryIpAddress field value if set, zero value otherwise.
func (o *MinimalNetwork) GetBoundaryIpAddress() string {
	if o == nil || o.BoundaryIpAddress == nil {
		var ret string
		return ret
	}
	return *o.BoundaryIpAddress
}

// GetBoundaryIpAddressOk returns a tuple with the BoundaryIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalNetwork) GetBoundaryIpAddressOk() (*string, bool) {
	if o == nil || o.BoundaryIpAddress == nil {
		return nil, false
	}
	return o.BoundaryIpAddress, true
}

// HasBoundaryIpAddress returns a boolean if a field has been set.
func (o *MinimalNetwork) HasBoundaryIpAddress() bool {
	if o != nil && o.BoundaryIpAddress != nil {
		return true
	}

	return false
}

// SetBoundaryIpAddress gets a reference to the given string and assigns it to the BoundaryIpAddress field.
func (o *MinimalNetwork) SetBoundaryIpAddress(v string) {
	o.BoundaryIpAddress = &v
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *MinimalNetwork) GetCidr() string {
	if o == nil || o.Cidr == nil {
		var ret string
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalNetwork) GetCidrOk() (*string, bool) {
	if o == nil || o.Cidr == nil {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *MinimalNetwork) HasCidr() bool {
	if o != nil && o.Cidr != nil {
		return true
	}

	return false
}

// SetCidr gets a reference to the given string and assigns it to the Cidr field.
func (o *MinimalNetwork) SetCidr(v string) {
	o.Cidr = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *MinimalNetwork) GetGateway() string {
	if o == nil || o.Gateway == nil {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalNetwork) GetGatewayOk() (*string, bool) {
	if o == nil || o.Gateway == nil {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *MinimalNetwork) HasGateway() bool {
	if o != nil && o.Gateway != nil {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *MinimalNetwork) SetGateway(v string) {
	o.Gateway = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *MinimalNetwork) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalNetwork) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *MinimalNetwork) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *MinimalNetwork) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetNetworkFunction returns the NetworkFunction field value if set, zero value otherwise.
func (o *MinimalNetwork) GetNetworkFunction() string {
	if o == nil || o.NetworkFunction == nil {
		var ret string
		return ret
	}
	return *o.NetworkFunction
}

// GetNetworkFunctionOk returns a tuple with the NetworkFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalNetwork) GetNetworkFunctionOk() (*string, bool) {
	if o == nil || o.NetworkFunction == nil {
		return nil, false
	}
	return o.NetworkFunction, true
}

// HasNetworkFunction returns a boolean if a field has been set.
func (o *MinimalNetwork) HasNetworkFunction() bool {
	if o != nil && o.NetworkFunction != nil {
		return true
	}

	return false
}

// SetNetworkFunction gets a reference to the given string and assigns it to the NetworkFunction field.
func (o *MinimalNetwork) SetNetworkFunction(v string) {
	o.NetworkFunction = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MinimalNetwork) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalNetwork) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MinimalNetwork) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MinimalNetwork) SetName(v string) {
	o.Name = &v
}

func (o MinimalNetwork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Isolated != nil {
		toSerialize["isolated"] = o.Isolated
	}
	if o.BoundaryIpAddress != nil {
		toSerialize["boundaryIpAddress"] = o.BoundaryIpAddress
	}
	if o.Cidr != nil {
		toSerialize["cidr"] = o.Cidr
	}
	if o.Gateway != nil {
		toSerialize["gateway"] = o.Gateway
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if o.NetworkFunction != nil {
		toSerialize["networkFunction"] = o.NetworkFunction
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableMinimalNetwork struct {
	value *MinimalNetwork
	isSet bool
}

func (v NullableMinimalNetwork) Get() *MinimalNetwork {
	return v.value
}

func (v *NullableMinimalNetwork) Set(val *MinimalNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimalNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimalNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimalNetwork(val *MinimalNetwork) *NullableMinimalNetwork {
	return &NullableMinimalNetwork{value: val, isSet: true}
}

func (v NullableMinimalNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimalNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
