/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// InputAssetForUpdate struct for InputAssetForUpdate
type InputAssetForUpdate struct {
	Name        *string              `json:"name,omitempty"`
	Description *string              `json:"description,omitempty"`
	Metadata    *MetadataDocsLicense `json:"metadata,omitempty"`
}

// NewInputAssetForUpdate instantiates a new InputAssetForUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputAssetForUpdate() *InputAssetForUpdate {
	this := InputAssetForUpdate{}
	return &this
}

// NewInputAssetForUpdateWithDefaults instantiates a new InputAssetForUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputAssetForUpdateWithDefaults() *InputAssetForUpdate {
	this := InputAssetForUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InputAssetForUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputAssetForUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InputAssetForUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InputAssetForUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InputAssetForUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputAssetForUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InputAssetForUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InputAssetForUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *InputAssetForUpdate) GetMetadata() MetadataDocsLicense {
	if o == nil || o.Metadata == nil {
		var ret MetadataDocsLicense
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputAssetForUpdate) GetMetadataOk() (*MetadataDocsLicense, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *InputAssetForUpdate) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given MetadataDocsLicense and assigns it to the Metadata field.
func (o *InputAssetForUpdate) SetMetadata(v MetadataDocsLicense) {
	o.Metadata = &v
}

func (o InputAssetForUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableInputAssetForUpdate struct {
	value *InputAssetForUpdate
	isSet bool
}

func (v NullableInputAssetForUpdate) Get() *InputAssetForUpdate {
	return v.value
}

func (v *NullableInputAssetForUpdate) Set(val *InputAssetForUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableInputAssetForUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableInputAssetForUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputAssetForUpdate(val *InputAssetForUpdate) *NullableInputAssetForUpdate {
	return &NullableInputAssetForUpdate{value: val, isSet: true}
}

func (v NullableInputAssetForUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputAssetForUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
