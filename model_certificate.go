/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Certificate struct for Certificate
type Certificate struct {
	Pem *string `json:"pem,omitempty"`
}

// NewCertificate instantiates a new Certificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificate() *Certificate {
	this := Certificate{}
	return &this
}

// NewCertificateWithDefaults instantiates a new Certificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateWithDefaults() *Certificate {
	this := Certificate{}
	return &this
}

// GetPem returns the Pem field value if set, zero value otherwise.
func (o *Certificate) GetPem() string {
	if o == nil || o.Pem == nil {
		var ret string
		return ret
	}
	return *o.Pem
}

// GetPemOk returns a tuple with the Pem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Certificate) GetPemOk() (*string, bool) {
	if o == nil || o.Pem == nil {
		return nil, false
	}
	return o.Pem, true
}

// HasPem returns a boolean if a field has been set.
func (o *Certificate) HasPem() bool {
	if o != nil && o.Pem != nil {
		return true
	}

	return false
}

// SetPem gets a reference to the given string and assigns it to the Pem field.
func (o *Certificate) SetPem(v string) {
	o.Pem = &v
}

func (o Certificate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pem != nil {
		toSerialize["pem"] = o.Pem
	}
	return json.Marshal(toSerialize)
}

type NullableCertificate struct {
	value *Certificate
	isSet bool
}

func (v NullableCertificate) Get() *Certificate {
	return v.value
}

func (v *NullableCertificate) Set(val *Certificate) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificate(val *Certificate) *NullableCertificate {
	return &NullableCertificate{value: val, isSet: true}
}

func (v NullableCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
