/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gocons3rt

import (
	"encoding/json"
)

// ResourceUsageDTO struct for ResourceUsageDTO
type ResourceUsageDTO struct {
	GpuTypeUsage *map[string]int32 `json:"gpuTypeUsage,omitempty"`
	NumCpus *int32 `json:"numCpus,omitempty"`
	RamInMegabytes *int32 `json:"ramInMegabytes,omitempty"`
	StorageInMegabytes *int32 `json:"storageInMegabytes,omitempty"`
	VirtualMachines *int32 `json:"virtualMachines,omitempty"`
}

// NewResourceUsageDTO instantiates a new ResourceUsageDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceUsageDTO() *ResourceUsageDTO {
	this := ResourceUsageDTO{}
	return &this
}

// NewResourceUsageDTOWithDefaults instantiates a new ResourceUsageDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceUsageDTOWithDefaults() *ResourceUsageDTO {
	this := ResourceUsageDTO{}
	return &this
}

// GetGpuTypeUsage returns the GpuTypeUsage field value if set, zero value otherwise.
func (o *ResourceUsageDTO) GetGpuTypeUsage() map[string]int32 {
	if o == nil || o.GpuTypeUsage == nil {
		var ret map[string]int32
		return ret
	}
	return *o.GpuTypeUsage
}

// GetGpuTypeUsageOk returns a tuple with the GpuTypeUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsageDTO) GetGpuTypeUsageOk() (*map[string]int32, bool) {
	if o == nil || o.GpuTypeUsage == nil {
		return nil, false
	}
	return o.GpuTypeUsage, true
}

// HasGpuTypeUsage returns a boolean if a field has been set.
func (o *ResourceUsageDTO) HasGpuTypeUsage() bool {
	if o != nil && o.GpuTypeUsage != nil {
		return true
	}

	return false
}

// SetGpuTypeUsage gets a reference to the given map[string]int32 and assigns it to the GpuTypeUsage field.
func (o *ResourceUsageDTO) SetGpuTypeUsage(v map[string]int32) {
	o.GpuTypeUsage = &v
}

// GetNumCpus returns the NumCpus field value if set, zero value otherwise.
func (o *ResourceUsageDTO) GetNumCpus() int32 {
	if o == nil || o.NumCpus == nil {
		var ret int32
		return ret
	}
	return *o.NumCpus
}

// GetNumCpusOk returns a tuple with the NumCpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsageDTO) GetNumCpusOk() (*int32, bool) {
	if o == nil || o.NumCpus == nil {
		return nil, false
	}
	return o.NumCpus, true
}

// HasNumCpus returns a boolean if a field has been set.
func (o *ResourceUsageDTO) HasNumCpus() bool {
	if o != nil && o.NumCpus != nil {
		return true
	}

	return false
}

// SetNumCpus gets a reference to the given int32 and assigns it to the NumCpus field.
func (o *ResourceUsageDTO) SetNumCpus(v int32) {
	o.NumCpus = &v
}

// GetRamInMegabytes returns the RamInMegabytes field value if set, zero value otherwise.
func (o *ResourceUsageDTO) GetRamInMegabytes() int32 {
	if o == nil || o.RamInMegabytes == nil {
		var ret int32
		return ret
	}
	return *o.RamInMegabytes
}

// GetRamInMegabytesOk returns a tuple with the RamInMegabytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsageDTO) GetRamInMegabytesOk() (*int32, bool) {
	if o == nil || o.RamInMegabytes == nil {
		return nil, false
	}
	return o.RamInMegabytes, true
}

// HasRamInMegabytes returns a boolean if a field has been set.
func (o *ResourceUsageDTO) HasRamInMegabytes() bool {
	if o != nil && o.RamInMegabytes != nil {
		return true
	}

	return false
}

// SetRamInMegabytes gets a reference to the given int32 and assigns it to the RamInMegabytes field.
func (o *ResourceUsageDTO) SetRamInMegabytes(v int32) {
	o.RamInMegabytes = &v
}

// GetStorageInMegabytes returns the StorageInMegabytes field value if set, zero value otherwise.
func (o *ResourceUsageDTO) GetStorageInMegabytes() int32 {
	if o == nil || o.StorageInMegabytes == nil {
		var ret int32
		return ret
	}
	return *o.StorageInMegabytes
}

// GetStorageInMegabytesOk returns a tuple with the StorageInMegabytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsageDTO) GetStorageInMegabytesOk() (*int32, bool) {
	if o == nil || o.StorageInMegabytes == nil {
		return nil, false
	}
	return o.StorageInMegabytes, true
}

// HasStorageInMegabytes returns a boolean if a field has been set.
func (o *ResourceUsageDTO) HasStorageInMegabytes() bool {
	if o != nil && o.StorageInMegabytes != nil {
		return true
	}

	return false
}

// SetStorageInMegabytes gets a reference to the given int32 and assigns it to the StorageInMegabytes field.
func (o *ResourceUsageDTO) SetStorageInMegabytes(v int32) {
	o.StorageInMegabytes = &v
}

// GetVirtualMachines returns the VirtualMachines field value if set, zero value otherwise.
func (o *ResourceUsageDTO) GetVirtualMachines() int32 {
	if o == nil || o.VirtualMachines == nil {
		var ret int32
		return ret
	}
	return *o.VirtualMachines
}

// GetVirtualMachinesOk returns a tuple with the VirtualMachines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsageDTO) GetVirtualMachinesOk() (*int32, bool) {
	if o == nil || o.VirtualMachines == nil {
		return nil, false
	}
	return o.VirtualMachines, true
}

// HasVirtualMachines returns a boolean if a field has been set.
func (o *ResourceUsageDTO) HasVirtualMachines() bool {
	if o != nil && o.VirtualMachines != nil {
		return true
	}

	return false
}

// SetVirtualMachines gets a reference to the given int32 and assigns it to the VirtualMachines field.
func (o *ResourceUsageDTO) SetVirtualMachines(v int32) {
	o.VirtualMachines = &v
}

func (o ResourceUsageDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GpuTypeUsage != nil {
		toSerialize["gpuTypeUsage"] = o.GpuTypeUsage
	}
	if o.NumCpus != nil {
		toSerialize["numCpus"] = o.NumCpus
	}
	if o.RamInMegabytes != nil {
		toSerialize["ramInMegabytes"] = o.RamInMegabytes
	}
	if o.StorageInMegabytes != nil {
		toSerialize["storageInMegabytes"] = o.StorageInMegabytes
	}
	if o.VirtualMachines != nil {
		toSerialize["virtualMachines"] = o.VirtualMachines
	}
	return json.Marshal(toSerialize)
}

type NullableResourceUsageDTO struct {
	value *ResourceUsageDTO
	isSet bool
}

func (v NullableResourceUsageDTO) Get() *ResourceUsageDTO {
	return v.value
}

func (v *NullableResourceUsageDTO) Set(val *ResourceUsageDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceUsageDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceUsageDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceUsageDTO(val *ResourceUsageDTO) *NullableResourceUsageDTO {
	return &NullableResourceUsageDTO{value: val, isSet: true}
}

func (v NullableResourceUsageDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceUsageDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


