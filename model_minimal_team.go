/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// MinimalTeam struct for MinimalTeam
type MinimalTeam struct {
	Id          *int32  `json:"id,omitempty"`
	Name        string  `json:"name"`
	Private     *bool   `json:"private,omitempty"`
	State       string  `json:"state"`
	ValidUtil   *int32  `json:"validUtil,omitempty"`
	ContactInfo PocInfo `json:"contactInfo"`
}

// NewMinimalTeam instantiates a new MinimalTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinimalTeam(name string, state string, contactInfo PocInfo) *MinimalTeam {
	this := MinimalTeam{}
	this.Name = name
	this.State = state
	this.ContactInfo = contactInfo
	return &this
}

// NewMinimalTeamWithDefaults instantiates a new MinimalTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinimalTeamWithDefaults() *MinimalTeam {
	this := MinimalTeam{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MinimalTeam) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTeam) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MinimalTeam) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MinimalTeam) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *MinimalTeam) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MinimalTeam) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MinimalTeam) SetName(v string) {
	o.Name = v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *MinimalTeam) GetPrivate() bool {
	if o == nil || o.Private == nil {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTeam) GetPrivateOk() (*bool, bool) {
	if o == nil || o.Private == nil {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *MinimalTeam) HasPrivate() bool {
	if o != nil && o.Private != nil {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *MinimalTeam) SetPrivate(v bool) {
	o.Private = &v
}

// GetState returns the State field value
func (o *MinimalTeam) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *MinimalTeam) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *MinimalTeam) SetState(v string) {
	o.State = v
}

// GetValidUtil returns the ValidUtil field value if set, zero value otherwise.
func (o *MinimalTeam) GetValidUtil() int32 {
	if o == nil || o.ValidUtil == nil {
		var ret int32
		return ret
	}
	return *o.ValidUtil
}

// GetValidUtilOk returns a tuple with the ValidUtil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTeam) GetValidUtilOk() (*int32, bool) {
	if o == nil || o.ValidUtil == nil {
		return nil, false
	}
	return o.ValidUtil, true
}

// HasValidUtil returns a boolean if a field has been set.
func (o *MinimalTeam) HasValidUtil() bool {
	if o != nil && o.ValidUtil != nil {
		return true
	}

	return false
}

// SetValidUtil gets a reference to the given int32 and assigns it to the ValidUtil field.
func (o *MinimalTeam) SetValidUtil(v int32) {
	o.ValidUtil = &v
}

// GetContactInfo returns the ContactInfo field value
func (o *MinimalTeam) GetContactInfo() PocInfo {
	if o == nil {
		var ret PocInfo
		return ret
	}

	return o.ContactInfo
}

// GetContactInfoOk returns a tuple with the ContactInfo field value
// and a boolean to check if the value has been set.
func (o *MinimalTeam) GetContactInfoOk() (*PocInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContactInfo, true
}

// SetContactInfo sets field value
func (o *MinimalTeam) SetContactInfo(v PocInfo) {
	o.ContactInfo = v
}

func (o MinimalTeam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Private != nil {
		toSerialize["private"] = o.Private
	}
	if true {
		toSerialize["state"] = o.State
	}
	if o.ValidUtil != nil {
		toSerialize["validUtil"] = o.ValidUtil
	}
	if true {
		toSerialize["contactInfo"] = o.ContactInfo
	}
	return json.Marshal(toSerialize)
}

type NullableMinimalTeam struct {
	value *MinimalTeam
	isSet bool
}

func (v NullableMinimalTeam) Get() *MinimalTeam {
	return v.value
}

func (v *NullableMinimalTeam) Set(val *MinimalTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimalTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimalTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimalTeam(val *MinimalTeam) *NullableMinimalTeam {
	return &NullableMinimalTeam{value: val, isSet: true}
}

func (v NullableMinimalTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimalTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
