/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// MinimalVirtualizationRealm struct for MinimalVirtualizationRealm
type MinimalVirtualizationRealm struct {
	VirtualizationRealmType *string `json:"virtualizationRealmType,omitempty"`
	Id                      int32   `json:"id"`
	Name                    *string `json:"name,omitempty"`
	State                   *string `json:"state,omitempty"`
}

// NewMinimalVirtualizationRealm instantiates a new MinimalVirtualizationRealm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinimalVirtualizationRealm(id int32) *MinimalVirtualizationRealm {
	this := MinimalVirtualizationRealm{}
	this.Id = id
	return &this
}

// NewMinimalVirtualizationRealmWithDefaults instantiates a new MinimalVirtualizationRealm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinimalVirtualizationRealmWithDefaults() *MinimalVirtualizationRealm {
	this := MinimalVirtualizationRealm{}
	return &this
}

// GetVirtualizationRealmType returns the VirtualizationRealmType field value if set, zero value otherwise.
func (o *MinimalVirtualizationRealm) GetVirtualizationRealmType() string {
	if o == nil || o.VirtualizationRealmType == nil {
		var ret string
		return ret
	}
	return *o.VirtualizationRealmType
}

// GetVirtualizationRealmTypeOk returns a tuple with the VirtualizationRealmType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalVirtualizationRealm) GetVirtualizationRealmTypeOk() (*string, bool) {
	if o == nil || o.VirtualizationRealmType == nil {
		return nil, false
	}
	return o.VirtualizationRealmType, true
}

// HasVirtualizationRealmType returns a boolean if a field has been set.
func (o *MinimalVirtualizationRealm) HasVirtualizationRealmType() bool {
	if o != nil && o.VirtualizationRealmType != nil {
		return true
	}

	return false
}

// SetVirtualizationRealmType gets a reference to the given string and assigns it to the VirtualizationRealmType field.
func (o *MinimalVirtualizationRealm) SetVirtualizationRealmType(v string) {
	o.VirtualizationRealmType = &v
}

// GetId returns the Id field value
func (o *MinimalVirtualizationRealm) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MinimalVirtualizationRealm) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MinimalVirtualizationRealm) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MinimalVirtualizationRealm) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalVirtualizationRealm) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MinimalVirtualizationRealm) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MinimalVirtualizationRealm) SetName(v string) {
	o.Name = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *MinimalVirtualizationRealm) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalVirtualizationRealm) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *MinimalVirtualizationRealm) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *MinimalVirtualizationRealm) SetState(v string) {
	o.State = &v
}

func (o MinimalVirtualizationRealm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VirtualizationRealmType != nil {
		toSerialize["virtualizationRealmType"] = o.VirtualizationRealmType
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableMinimalVirtualizationRealm struct {
	value *MinimalVirtualizationRealm
	isSet bool
}

func (v NullableMinimalVirtualizationRealm) Get() *MinimalVirtualizationRealm {
	return v.value
}

func (v *NullableMinimalVirtualizationRealm) Set(val *MinimalVirtualizationRealm) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimalVirtualizationRealm) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimalVirtualizationRealm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimalVirtualizationRealm(val *MinimalVirtualizationRealm) *NullableMinimalVirtualizationRealm {
	return &NullableMinimalVirtualizationRealm{value: val, isSet: true}
}

func (v NullableMinimalVirtualizationRealm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimalVirtualizationRealm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
