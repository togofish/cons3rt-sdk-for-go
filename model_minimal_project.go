/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MinimalProject struct for MinimalProject
type MinimalProject struct {
	Id             *int32  `json:"id,omitempty"`
	Name           *string `json:"name,omitempty"`
	ItarRestricted *bool   `json:"itarRestricted,omitempty"`
}

// NewMinimalProject instantiates a new MinimalProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinimalProject() *MinimalProject {
	this := MinimalProject{}
	return &this
}

// NewMinimalProjectWithDefaults instantiates a new MinimalProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinimalProjectWithDefaults() *MinimalProject {
	this := MinimalProject{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MinimalProject) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalProject) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MinimalProject) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MinimalProject) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MinimalProject) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalProject) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MinimalProject) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MinimalProject) SetName(v string) {
	o.Name = &v
}

// GetItarRestricted returns the ItarRestricted field value if set, zero value otherwise.
func (o *MinimalProject) GetItarRestricted() bool {
	if o == nil || o.ItarRestricted == nil {
		var ret bool
		return ret
	}
	return *o.ItarRestricted
}

// GetItarRestrictedOk returns a tuple with the ItarRestricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalProject) GetItarRestrictedOk() (*bool, bool) {
	if o == nil || o.ItarRestricted == nil {
		return nil, false
	}
	return o.ItarRestricted, true
}

// HasItarRestricted returns a boolean if a field has been set.
func (o *MinimalProject) HasItarRestricted() bool {
	if o != nil && o.ItarRestricted != nil {
		return true
	}

	return false
}

// SetItarRestricted gets a reference to the given bool and assigns it to the ItarRestricted field.
func (o *MinimalProject) SetItarRestricted(v bool) {
	o.ItarRestricted = &v
}

func (o MinimalProject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ItarRestricted != nil {
		toSerialize["itarRestricted"] = o.ItarRestricted
	}
	return json.Marshal(toSerialize)
}

type NullableMinimalProject struct {
	value *MinimalProject
	isSet bool
}

func (v NullableMinimalProject) Get() *MinimalProject {
	return v.value
}

func (v *NullableMinimalProject) Set(val *MinimalProject) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimalProject) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimalProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimalProject(val *MinimalProject) *NullableMinimalProject {
	return &NullableMinimalProject{value: val, isSet: true}
}

func (v NullableMinimalProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimalProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
