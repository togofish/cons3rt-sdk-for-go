/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// InputDeployment struct for InputDeployment
type InputDeployment struct {
	Name        *string              `json:"name,omitempty"`
	Metadata    *InputMetadata       `json:"metadata,omitempty"`
	Scenarios   *[]InputScenarioFull `json:"scenarios,omitempty"`
	TestBundles *[]InputTestBundle   `json:"testBundles,omitempty"`
}

// NewInputDeployment instantiates a new InputDeployment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputDeployment() *InputDeployment {
	this := InputDeployment{}
	return &this
}

// NewInputDeploymentWithDefaults instantiates a new InputDeployment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputDeploymentWithDefaults() *InputDeployment {
	this := InputDeployment{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InputDeployment) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputDeployment) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InputDeployment) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InputDeployment) SetName(v string) {
	o.Name = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *InputDeployment) GetMetadata() InputMetadata {
	if o == nil || o.Metadata == nil {
		var ret InputMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputDeployment) GetMetadataOk() (*InputMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *InputDeployment) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given InputMetadata and assigns it to the Metadata field.
func (o *InputDeployment) SetMetadata(v InputMetadata) {
	o.Metadata = &v
}

// GetScenarios returns the Scenarios field value if set, zero value otherwise.
func (o *InputDeployment) GetScenarios() []InputScenarioFull {
	if o == nil || o.Scenarios == nil {
		var ret []InputScenarioFull
		return ret
	}
	return *o.Scenarios
}

// GetScenariosOk returns a tuple with the Scenarios field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputDeployment) GetScenariosOk() (*[]InputScenarioFull, bool) {
	if o == nil || o.Scenarios == nil {
		return nil, false
	}
	return o.Scenarios, true
}

// HasScenarios returns a boolean if a field has been set.
func (o *InputDeployment) HasScenarios() bool {
	if o != nil && o.Scenarios != nil {
		return true
	}

	return false
}

// SetScenarios gets a reference to the given []InputScenarioFull and assigns it to the Scenarios field.
func (o *InputDeployment) SetScenarios(v []InputScenarioFull) {
	o.Scenarios = &v
}

// GetTestBundles returns the TestBundles field value if set, zero value otherwise.
func (o *InputDeployment) GetTestBundles() []InputTestBundle {
	if o == nil || o.TestBundles == nil {
		var ret []InputTestBundle
		return ret
	}
	return *o.TestBundles
}

// GetTestBundlesOk returns a tuple with the TestBundles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputDeployment) GetTestBundlesOk() (*[]InputTestBundle, bool) {
	if o == nil || o.TestBundles == nil {
		return nil, false
	}
	return o.TestBundles, true
}

// HasTestBundles returns a boolean if a field has been set.
func (o *InputDeployment) HasTestBundles() bool {
	if o != nil && o.TestBundles != nil {
		return true
	}

	return false
}

// SetTestBundles gets a reference to the given []InputTestBundle and assigns it to the TestBundles field.
func (o *InputDeployment) SetTestBundles(v []InputTestBundle) {
	o.TestBundles = &v
}

func (o InputDeployment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Scenarios != nil {
		toSerialize["scenarios"] = o.Scenarios
	}
	if o.TestBundles != nil {
		toSerialize["testBundles"] = o.TestBundles
	}
	return json.Marshal(toSerialize)
}

type NullableInputDeployment struct {
	value *InputDeployment
	isSet bool
}

func (v NullableInputDeployment) Get() *InputDeployment {
	return v.value
}

func (v *NullableInputDeployment) Set(val *InputDeployment) {
	v.value = val
	v.isSet = true
}

func (v NullableInputDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullableInputDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputDeployment(val *InputDeployment) *NullableInputDeployment {
	return &NullableInputDeployment{value: val, isSet: true}
}

func (v NullableInputDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
