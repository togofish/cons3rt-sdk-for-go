/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// InputProjectFull struct for InputProjectFull
type InputProjectFull struct {
	Name           string           `json:"name"`
	Description    *string          `json:"description,omitempty"`
	ItarRestricted *bool            `json:"itarRestricted,omitempty"`
	OwningTeam     *InputTeam       `json:"owningTeam,omitempty"`
	Limits         ProjectLimits    `json:"limits"`
	DefaultRole    *string          `json:"defaultRole,omitempty"`
	Features       *ProjectFeatures `json:"features,omitempty"`
	IsPrivate      *bool            `json:"isPrivate,omitempty"`
}

// NewInputProjectFull instantiates a new InputProjectFull object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputProjectFull(name string, limits ProjectLimits) *InputProjectFull {
	this := InputProjectFull{}
	this.Name = name
	this.Limits = limits
	return &this
}

// NewInputProjectFullWithDefaults instantiates a new InputProjectFull object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputProjectFullWithDefaults() *InputProjectFull {
	this := InputProjectFull{}
	return &this
}

// GetName returns the Name field value
func (o *InputProjectFull) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InputProjectFull) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InputProjectFull) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InputProjectFull) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputProjectFull) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InputProjectFull) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InputProjectFull) SetDescription(v string) {
	o.Description = &v
}

// GetItarRestricted returns the ItarRestricted field value if set, zero value otherwise.
func (o *InputProjectFull) GetItarRestricted() bool {
	if o == nil || o.ItarRestricted == nil {
		var ret bool
		return ret
	}
	return *o.ItarRestricted
}

// GetItarRestrictedOk returns a tuple with the ItarRestricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputProjectFull) GetItarRestrictedOk() (*bool, bool) {
	if o == nil || o.ItarRestricted == nil {
		return nil, false
	}
	return o.ItarRestricted, true
}

// HasItarRestricted returns a boolean if a field has been set.
func (o *InputProjectFull) HasItarRestricted() bool {
	if o != nil && o.ItarRestricted != nil {
		return true
	}

	return false
}

// SetItarRestricted gets a reference to the given bool and assigns it to the ItarRestricted field.
func (o *InputProjectFull) SetItarRestricted(v bool) {
	o.ItarRestricted = &v
}

// GetOwningTeam returns the OwningTeam field value if set, zero value otherwise.
func (o *InputProjectFull) GetOwningTeam() InputTeam {
	if o == nil || o.OwningTeam == nil {
		var ret InputTeam
		return ret
	}
	return *o.OwningTeam
}

// GetOwningTeamOk returns a tuple with the OwningTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputProjectFull) GetOwningTeamOk() (*InputTeam, bool) {
	if o == nil || o.OwningTeam == nil {
		return nil, false
	}
	return o.OwningTeam, true
}

// HasOwningTeam returns a boolean if a field has been set.
func (o *InputProjectFull) HasOwningTeam() bool {
	if o != nil && o.OwningTeam != nil {
		return true
	}

	return false
}

// SetOwningTeam gets a reference to the given InputTeam and assigns it to the OwningTeam field.
func (o *InputProjectFull) SetOwningTeam(v InputTeam) {
	o.OwningTeam = &v
}

// GetLimits returns the Limits field value
func (o *InputProjectFull) GetLimits() ProjectLimits {
	if o == nil {
		var ret ProjectLimits
		return ret
	}

	return o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value
// and a boolean to check if the value has been set.
func (o *InputProjectFull) GetLimitsOk() (*ProjectLimits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limits, true
}

// SetLimits sets field value
func (o *InputProjectFull) SetLimits(v ProjectLimits) {
	o.Limits = v
}

// GetDefaultRole returns the DefaultRole field value if set, zero value otherwise.
func (o *InputProjectFull) GetDefaultRole() string {
	if o == nil || o.DefaultRole == nil {
		var ret string
		return ret
	}
	return *o.DefaultRole
}

// GetDefaultRoleOk returns a tuple with the DefaultRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputProjectFull) GetDefaultRoleOk() (*string, bool) {
	if o == nil || o.DefaultRole == nil {
		return nil, false
	}
	return o.DefaultRole, true
}

// HasDefaultRole returns a boolean if a field has been set.
func (o *InputProjectFull) HasDefaultRole() bool {
	if o != nil && o.DefaultRole != nil {
		return true
	}

	return false
}

// SetDefaultRole gets a reference to the given string and assigns it to the DefaultRole field.
func (o *InputProjectFull) SetDefaultRole(v string) {
	o.DefaultRole = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *InputProjectFull) GetFeatures() ProjectFeatures {
	if o == nil || o.Features == nil {
		var ret ProjectFeatures
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputProjectFull) GetFeaturesOk() (*ProjectFeatures, bool) {
	if o == nil || o.Features == nil {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *InputProjectFull) HasFeatures() bool {
	if o != nil && o.Features != nil {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given ProjectFeatures and assigns it to the Features field.
func (o *InputProjectFull) SetFeatures(v ProjectFeatures) {
	o.Features = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *InputProjectFull) GetIsPrivate() bool {
	if o == nil || o.IsPrivate == nil {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputProjectFull) GetIsPrivateOk() (*bool, bool) {
	if o == nil || o.IsPrivate == nil {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *InputProjectFull) HasIsPrivate() bool {
	if o != nil && o.IsPrivate != nil {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *InputProjectFull) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

func (o InputProjectFull) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ItarRestricted != nil {
		toSerialize["itarRestricted"] = o.ItarRestricted
	}
	if o.OwningTeam != nil {
		toSerialize["owningTeam"] = o.OwningTeam
	}
	if true {
		toSerialize["limits"] = o.Limits
	}
	if o.DefaultRole != nil {
		toSerialize["defaultRole"] = o.DefaultRole
	}
	if o.Features != nil {
		toSerialize["features"] = o.Features
	}
	if o.IsPrivate != nil {
		toSerialize["isPrivate"] = o.IsPrivate
	}
	return json.Marshal(toSerialize)
}

type NullableInputProjectFull struct {
	value *InputProjectFull
	isSet bool
}

func (v NullableInputProjectFull) Get() *InputProjectFull {
	return v.value
}

func (v *NullableInputProjectFull) Set(val *InputProjectFull) {
	v.value = val
	v.isSet = true
}

func (v NullableInputProjectFull) IsSet() bool {
	return v.isSet
}

func (v *NullableInputProjectFull) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputProjectFull(val *InputProjectFull) *NullableInputProjectFull {
	return &NullableInputProjectFull{value: val, isSet: true}
}

func (v NullableInputProjectFull) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputProjectFull) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
