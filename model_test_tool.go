/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// TestTool struct for TestTool
type TestTool struct {
	TestToolType           *string     `json:"testToolType,omitempty"`
	TestToolVendor         *string     `json:"testToolVendor,omitempty"`
	AutoRegistered         *bool       `json:"autoRegistered,omitempty"`
	Description            *string     `json:"description,omitempty"`
	Hostname               *string     `json:"hostname,omitempty"`
	Id                     *int32      `json:"id,omitempty"`
	InstanceLimit          *int32      `json:"instanceLimit,omitempty"`
	Name                   *string     `json:"name,omitempty"`
	Properties             *[]Property `json:"properties,omitempty"`
	TestRunTasks           *[]int32    `json:"testRunTasks,omitempty"`
	TestToolAgentInstalled *bool       `json:"testToolAgentInstalled,omitempty"`
	Version                *string     `json:"version,omitempty"`
	TmaEnabled             *bool       `json:"tmaEnabled,omitempty"`
	TmaOnline              *bool       `json:"tmaOnline,omitempty"`
	TmaServiceName         *string     `json:"tmaServiceName,omitempty"`
	TmaVersion             *string     `json:"tmaVersion,omitempty"`
	Visibility             *string     `json:"visibility,omitempty"`
}

// NewTestTool instantiates a new TestTool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestTool() *TestTool {
	this := TestTool{}
	return &this
}

// NewTestToolWithDefaults instantiates a new TestTool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestToolWithDefaults() *TestTool {
	this := TestTool{}
	return &this
}

// GetTestToolType returns the TestToolType field value if set, zero value otherwise.
func (o *TestTool) GetTestToolType() string {
	if o == nil || o.TestToolType == nil {
		var ret string
		return ret
	}
	return *o.TestToolType
}

// GetTestToolTypeOk returns a tuple with the TestToolType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetTestToolTypeOk() (*string, bool) {
	if o == nil || o.TestToolType == nil {
		return nil, false
	}
	return o.TestToolType, true
}

// HasTestToolType returns a boolean if a field has been set.
func (o *TestTool) HasTestToolType() bool {
	if o != nil && o.TestToolType != nil {
		return true
	}

	return false
}

// SetTestToolType gets a reference to the given string and assigns it to the TestToolType field.
func (o *TestTool) SetTestToolType(v string) {
	o.TestToolType = &v
}

// GetTestToolVendor returns the TestToolVendor field value if set, zero value otherwise.
func (o *TestTool) GetTestToolVendor() string {
	if o == nil || o.TestToolVendor == nil {
		var ret string
		return ret
	}
	return *o.TestToolVendor
}

// GetTestToolVendorOk returns a tuple with the TestToolVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetTestToolVendorOk() (*string, bool) {
	if o == nil || o.TestToolVendor == nil {
		return nil, false
	}
	return o.TestToolVendor, true
}

// HasTestToolVendor returns a boolean if a field has been set.
func (o *TestTool) HasTestToolVendor() bool {
	if o != nil && o.TestToolVendor != nil {
		return true
	}

	return false
}

// SetTestToolVendor gets a reference to the given string and assigns it to the TestToolVendor field.
func (o *TestTool) SetTestToolVendor(v string) {
	o.TestToolVendor = &v
}

// GetAutoRegistered returns the AutoRegistered field value if set, zero value otherwise.
func (o *TestTool) GetAutoRegistered() bool {
	if o == nil || o.AutoRegistered == nil {
		var ret bool
		return ret
	}
	return *o.AutoRegistered
}

// GetAutoRegisteredOk returns a tuple with the AutoRegistered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetAutoRegisteredOk() (*bool, bool) {
	if o == nil || o.AutoRegistered == nil {
		return nil, false
	}
	return o.AutoRegistered, true
}

// HasAutoRegistered returns a boolean if a field has been set.
func (o *TestTool) HasAutoRegistered() bool {
	if o != nil && o.AutoRegistered != nil {
		return true
	}

	return false
}

// SetAutoRegistered gets a reference to the given bool and assigns it to the AutoRegistered field.
func (o *TestTool) SetAutoRegistered(v bool) {
	o.AutoRegistered = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TestTool) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TestTool) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TestTool) SetDescription(v string) {
	o.Description = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *TestTool) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *TestTool) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *TestTool) SetHostname(v string) {
	o.Hostname = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TestTool) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TestTool) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TestTool) SetId(v int32) {
	o.Id = &v
}

// GetInstanceLimit returns the InstanceLimit field value if set, zero value otherwise.
func (o *TestTool) GetInstanceLimit() int32 {
	if o == nil || o.InstanceLimit == nil {
		var ret int32
		return ret
	}
	return *o.InstanceLimit
}

// GetInstanceLimitOk returns a tuple with the InstanceLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetInstanceLimitOk() (*int32, bool) {
	if o == nil || o.InstanceLimit == nil {
		return nil, false
	}
	return o.InstanceLimit, true
}

// HasInstanceLimit returns a boolean if a field has been set.
func (o *TestTool) HasInstanceLimit() bool {
	if o != nil && o.InstanceLimit != nil {
		return true
	}

	return false
}

// SetInstanceLimit gets a reference to the given int32 and assigns it to the InstanceLimit field.
func (o *TestTool) SetInstanceLimit(v int32) {
	o.InstanceLimit = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TestTool) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TestTool) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TestTool) SetName(v string) {
	o.Name = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *TestTool) GetProperties() []Property {
	if o == nil || o.Properties == nil {
		var ret []Property
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetPropertiesOk() (*[]Property, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *TestTool) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []Property and assigns it to the Properties field.
func (o *TestTool) SetProperties(v []Property) {
	o.Properties = &v
}

// GetTestRunTasks returns the TestRunTasks field value if set, zero value otherwise.
func (o *TestTool) GetTestRunTasks() []int32 {
	if o == nil || o.TestRunTasks == nil {
		var ret []int32
		return ret
	}
	return *o.TestRunTasks
}

// GetTestRunTasksOk returns a tuple with the TestRunTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetTestRunTasksOk() (*[]int32, bool) {
	if o == nil || o.TestRunTasks == nil {
		return nil, false
	}
	return o.TestRunTasks, true
}

// HasTestRunTasks returns a boolean if a field has been set.
func (o *TestTool) HasTestRunTasks() bool {
	if o != nil && o.TestRunTasks != nil {
		return true
	}

	return false
}

// SetTestRunTasks gets a reference to the given []int32 and assigns it to the TestRunTasks field.
func (o *TestTool) SetTestRunTasks(v []int32) {
	o.TestRunTasks = &v
}

// GetTestToolAgentInstalled returns the TestToolAgentInstalled field value if set, zero value otherwise.
func (o *TestTool) GetTestToolAgentInstalled() bool {
	if o == nil || o.TestToolAgentInstalled == nil {
		var ret bool
		return ret
	}
	return *o.TestToolAgentInstalled
}

// GetTestToolAgentInstalledOk returns a tuple with the TestToolAgentInstalled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetTestToolAgentInstalledOk() (*bool, bool) {
	if o == nil || o.TestToolAgentInstalled == nil {
		return nil, false
	}
	return o.TestToolAgentInstalled, true
}

// HasTestToolAgentInstalled returns a boolean if a field has been set.
func (o *TestTool) HasTestToolAgentInstalled() bool {
	if o != nil && o.TestToolAgentInstalled != nil {
		return true
	}

	return false
}

// SetTestToolAgentInstalled gets a reference to the given bool and assigns it to the TestToolAgentInstalled field.
func (o *TestTool) SetTestToolAgentInstalled(v bool) {
	o.TestToolAgentInstalled = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *TestTool) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *TestTool) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *TestTool) SetVersion(v string) {
	o.Version = &v
}

// GetTmaEnabled returns the TmaEnabled field value if set, zero value otherwise.
func (o *TestTool) GetTmaEnabled() bool {
	if o == nil || o.TmaEnabled == nil {
		var ret bool
		return ret
	}
	return *o.TmaEnabled
}

// GetTmaEnabledOk returns a tuple with the TmaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetTmaEnabledOk() (*bool, bool) {
	if o == nil || o.TmaEnabled == nil {
		return nil, false
	}
	return o.TmaEnabled, true
}

// HasTmaEnabled returns a boolean if a field has been set.
func (o *TestTool) HasTmaEnabled() bool {
	if o != nil && o.TmaEnabled != nil {
		return true
	}

	return false
}

// SetTmaEnabled gets a reference to the given bool and assigns it to the TmaEnabled field.
func (o *TestTool) SetTmaEnabled(v bool) {
	o.TmaEnabled = &v
}

// GetTmaOnline returns the TmaOnline field value if set, zero value otherwise.
func (o *TestTool) GetTmaOnline() bool {
	if o == nil || o.TmaOnline == nil {
		var ret bool
		return ret
	}
	return *o.TmaOnline
}

// GetTmaOnlineOk returns a tuple with the TmaOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetTmaOnlineOk() (*bool, bool) {
	if o == nil || o.TmaOnline == nil {
		return nil, false
	}
	return o.TmaOnline, true
}

// HasTmaOnline returns a boolean if a field has been set.
func (o *TestTool) HasTmaOnline() bool {
	if o != nil && o.TmaOnline != nil {
		return true
	}

	return false
}

// SetTmaOnline gets a reference to the given bool and assigns it to the TmaOnline field.
func (o *TestTool) SetTmaOnline(v bool) {
	o.TmaOnline = &v
}

// GetTmaServiceName returns the TmaServiceName field value if set, zero value otherwise.
func (o *TestTool) GetTmaServiceName() string {
	if o == nil || o.TmaServiceName == nil {
		var ret string
		return ret
	}
	return *o.TmaServiceName
}

// GetTmaServiceNameOk returns a tuple with the TmaServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetTmaServiceNameOk() (*string, bool) {
	if o == nil || o.TmaServiceName == nil {
		return nil, false
	}
	return o.TmaServiceName, true
}

// HasTmaServiceName returns a boolean if a field has been set.
func (o *TestTool) HasTmaServiceName() bool {
	if o != nil && o.TmaServiceName != nil {
		return true
	}

	return false
}

// SetTmaServiceName gets a reference to the given string and assigns it to the TmaServiceName field.
func (o *TestTool) SetTmaServiceName(v string) {
	o.TmaServiceName = &v
}

// GetTmaVersion returns the TmaVersion field value if set, zero value otherwise.
func (o *TestTool) GetTmaVersion() string {
	if o == nil || o.TmaVersion == nil {
		var ret string
		return ret
	}
	return *o.TmaVersion
}

// GetTmaVersionOk returns a tuple with the TmaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetTmaVersionOk() (*string, bool) {
	if o == nil || o.TmaVersion == nil {
		return nil, false
	}
	return o.TmaVersion, true
}

// HasTmaVersion returns a boolean if a field has been set.
func (o *TestTool) HasTmaVersion() bool {
	if o != nil && o.TmaVersion != nil {
		return true
	}

	return false
}

// SetTmaVersion gets a reference to the given string and assigns it to the TmaVersion field.
func (o *TestTool) SetTmaVersion(v string) {
	o.TmaVersion = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *TestTool) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestTool) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *TestTool) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *TestTool) SetVisibility(v string) {
	o.Visibility = &v
}

func (o TestTool) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TestToolType != nil {
		toSerialize["testToolType"] = o.TestToolType
	}
	if o.TestToolVendor != nil {
		toSerialize["testToolVendor"] = o.TestToolVendor
	}
	if o.AutoRegistered != nil {
		toSerialize["autoRegistered"] = o.AutoRegistered
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.InstanceLimit != nil {
		toSerialize["instanceLimit"] = o.InstanceLimit
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.TestRunTasks != nil {
		toSerialize["testRunTasks"] = o.TestRunTasks
	}
	if o.TestToolAgentInstalled != nil {
		toSerialize["testToolAgentInstalled"] = o.TestToolAgentInstalled
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.TmaEnabled != nil {
		toSerialize["tmaEnabled"] = o.TmaEnabled
	}
	if o.TmaOnline != nil {
		toSerialize["tmaOnline"] = o.TmaOnline
	}
	if o.TmaServiceName != nil {
		toSerialize["tmaServiceName"] = o.TmaServiceName
	}
	if o.TmaVersion != nil {
		toSerialize["tmaVersion"] = o.TmaVersion
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	return json.Marshal(toSerialize)
}

type NullableTestTool struct {
	value *TestTool
	isSet bool
}

func (v NullableTestTool) Get() *TestTool {
	return v.value
}

func (v *NullableTestTool) Set(val *TestTool) {
	v.value = val
	v.isSet = true
}

func (v NullableTestTool) IsSet() bool {
	return v.isSet
}

func (v *NullableTestTool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestTool(val *TestTool) *NullableTestTool {
	return &NullableTestTool{value: val, isSet: true}
}

func (v NullableTestTool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestTool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
