/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Configuration struct for Configuration
type Configuration struct {
	IdConfiguration         *int32  `json:"idConfiguration,omitempty"`
	ConfigurationScriptType *string `json:"configurationScriptType,omitempty"`
	Script                  string  `json:"script"`
	ScriptName              *string `json:"scriptName,omitempty"`
}

// NewConfiguration instantiates a new Configuration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfiguration(script string) *Configuration {
	this := Configuration{}
	this.Script = script
	return &this
}

// NewConfigurationWithDefaults instantiates a new Configuration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationWithDefaults() *Configuration {
	this := Configuration{}
	return &this
}

// GetIdConfiguration returns the IdConfiguration field value if set, zero value otherwise.
func (o *Configuration) GetIdConfiguration() int32 {
	if o == nil || o.IdConfiguration == nil {
		var ret int32
		return ret
	}
	return *o.IdConfiguration
}

// GetIdConfigurationOk returns a tuple with the IdConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Configuration) GetIdConfigurationOk() (*int32, bool) {
	if o == nil || o.IdConfiguration == nil {
		return nil, false
	}
	return o.IdConfiguration, true
}

// HasIdConfiguration returns a boolean if a field has been set.
func (o *Configuration) HasIdConfiguration() bool {
	if o != nil && o.IdConfiguration != nil {
		return true
	}

	return false
}

// SetIdConfiguration gets a reference to the given int32 and assigns it to the IdConfiguration field.
func (o *Configuration) SetIdConfiguration(v int32) {
	o.IdConfiguration = &v
}

// GetConfigurationScriptType returns the ConfigurationScriptType field value if set, zero value otherwise.
func (o *Configuration) GetConfigurationScriptType() string {
	if o == nil || o.ConfigurationScriptType == nil {
		var ret string
		return ret
	}
	return *o.ConfigurationScriptType
}

// GetConfigurationScriptTypeOk returns a tuple with the ConfigurationScriptType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Configuration) GetConfigurationScriptTypeOk() (*string, bool) {
	if o == nil || o.ConfigurationScriptType == nil {
		return nil, false
	}
	return o.ConfigurationScriptType, true
}

// HasConfigurationScriptType returns a boolean if a field has been set.
func (o *Configuration) HasConfigurationScriptType() bool {
	if o != nil && o.ConfigurationScriptType != nil {
		return true
	}

	return false
}

// SetConfigurationScriptType gets a reference to the given string and assigns it to the ConfigurationScriptType field.
func (o *Configuration) SetConfigurationScriptType(v string) {
	o.ConfigurationScriptType = &v
}

// GetScript returns the Script field value
func (o *Configuration) GetScript() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Script
}

// GetScriptOk returns a tuple with the Script field value
// and a boolean to check if the value has been set.
func (o *Configuration) GetScriptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Script, true
}

// SetScript sets field value
func (o *Configuration) SetScript(v string) {
	o.Script = v
}

// GetScriptName returns the ScriptName field value if set, zero value otherwise.
func (o *Configuration) GetScriptName() string {
	if o == nil || o.ScriptName == nil {
		var ret string
		return ret
	}
	return *o.ScriptName
}

// GetScriptNameOk returns a tuple with the ScriptName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Configuration) GetScriptNameOk() (*string, bool) {
	if o == nil || o.ScriptName == nil {
		return nil, false
	}
	return o.ScriptName, true
}

// HasScriptName returns a boolean if a field has been set.
func (o *Configuration) HasScriptName() bool {
	if o != nil && o.ScriptName != nil {
		return true
	}

	return false
}

// SetScriptName gets a reference to the given string and assigns it to the ScriptName field.
func (o *Configuration) SetScriptName(v string) {
	o.ScriptName = &v
}

func (o Configuration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IdConfiguration != nil {
		toSerialize["idConfiguration"] = o.IdConfiguration
	}
	if o.ConfigurationScriptType != nil {
		toSerialize["configurationScriptType"] = o.ConfigurationScriptType
	}
	if true {
		toSerialize["script"] = o.Script
	}
	if o.ScriptName != nil {
		toSerialize["scriptName"] = o.ScriptName
	}
	return json.Marshal(toSerialize)
}

type NullableConfiguration struct {
	value *Configuration
	isSet bool
}

func (v NullableConfiguration) Get() *Configuration {
	return v.value
}

func (v *NullableConfiguration) Set(val *Configuration) {
	v.value = val
	v.isSet = true
}

func (v NullableConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfiguration(val *Configuration) *NullableConfiguration {
	return &NullableConfiguration{value: val, isSet: true}
}

func (v NullableConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
