/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gocons3rt

import (
	"encoding/json"
)

// InputScenario struct for InputScenario
type InputScenario struct {
	Name *string `json:"name,omitempty"`
	ScenarioHosts *[]InputScenarioHost `json:"scenarioHosts,omitempty"`
	PrepareScenarioConfiguration *InputConfiguration `json:"prepareScenarioConfiguration,omitempty"`
	TeardownScenarioConfiguration *InputConfiguration `json:"teardownScenarioConfiguration,omitempty"`
}

// NewInputScenario instantiates a new InputScenario object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputScenario() *InputScenario {
	this := InputScenario{}
	return &this
}

// NewInputScenarioWithDefaults instantiates a new InputScenario object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputScenarioWithDefaults() *InputScenario {
	this := InputScenario{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InputScenario) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputScenario) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InputScenario) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InputScenario) SetName(v string) {
	o.Name = &v
}

// GetScenarioHosts returns the ScenarioHosts field value if set, zero value otherwise.
func (o *InputScenario) GetScenarioHosts() []InputScenarioHost {
	if o == nil || o.ScenarioHosts == nil {
		var ret []InputScenarioHost
		return ret
	}
	return *o.ScenarioHosts
}

// GetScenarioHostsOk returns a tuple with the ScenarioHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputScenario) GetScenarioHostsOk() (*[]InputScenarioHost, bool) {
	if o == nil || o.ScenarioHosts == nil {
		return nil, false
	}
	return o.ScenarioHosts, true
}

// HasScenarioHosts returns a boolean if a field has been set.
func (o *InputScenario) HasScenarioHosts() bool {
	if o != nil && o.ScenarioHosts != nil {
		return true
	}

	return false
}

// SetScenarioHosts gets a reference to the given []InputScenarioHost and assigns it to the ScenarioHosts field.
func (o *InputScenario) SetScenarioHosts(v []InputScenarioHost) {
	o.ScenarioHosts = &v
}

// GetPrepareScenarioConfiguration returns the PrepareScenarioConfiguration field value if set, zero value otherwise.
func (o *InputScenario) GetPrepareScenarioConfiguration() InputConfiguration {
	if o == nil || o.PrepareScenarioConfiguration == nil {
		var ret InputConfiguration
		return ret
	}
	return *o.PrepareScenarioConfiguration
}

// GetPrepareScenarioConfigurationOk returns a tuple with the PrepareScenarioConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputScenario) GetPrepareScenarioConfigurationOk() (*InputConfiguration, bool) {
	if o == nil || o.PrepareScenarioConfiguration == nil {
		return nil, false
	}
	return o.PrepareScenarioConfiguration, true
}

// HasPrepareScenarioConfiguration returns a boolean if a field has been set.
func (o *InputScenario) HasPrepareScenarioConfiguration() bool {
	if o != nil && o.PrepareScenarioConfiguration != nil {
		return true
	}

	return false
}

// SetPrepareScenarioConfiguration gets a reference to the given InputConfiguration and assigns it to the PrepareScenarioConfiguration field.
func (o *InputScenario) SetPrepareScenarioConfiguration(v InputConfiguration) {
	o.PrepareScenarioConfiguration = &v
}

// GetTeardownScenarioConfiguration returns the TeardownScenarioConfiguration field value if set, zero value otherwise.
func (o *InputScenario) GetTeardownScenarioConfiguration() InputConfiguration {
	if o == nil || o.TeardownScenarioConfiguration == nil {
		var ret InputConfiguration
		return ret
	}
	return *o.TeardownScenarioConfiguration
}

// GetTeardownScenarioConfigurationOk returns a tuple with the TeardownScenarioConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputScenario) GetTeardownScenarioConfigurationOk() (*InputConfiguration, bool) {
	if o == nil || o.TeardownScenarioConfiguration == nil {
		return nil, false
	}
	return o.TeardownScenarioConfiguration, true
}

// HasTeardownScenarioConfiguration returns a boolean if a field has been set.
func (o *InputScenario) HasTeardownScenarioConfiguration() bool {
	if o != nil && o.TeardownScenarioConfiguration != nil {
		return true
	}

	return false
}

// SetTeardownScenarioConfiguration gets a reference to the given InputConfiguration and assigns it to the TeardownScenarioConfiguration field.
func (o *InputScenario) SetTeardownScenarioConfiguration(v InputConfiguration) {
	o.TeardownScenarioConfiguration = &v
}

func (o InputScenario) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ScenarioHosts != nil {
		toSerialize["scenarioHosts"] = o.ScenarioHosts
	}
	if o.PrepareScenarioConfiguration != nil {
		toSerialize["prepareScenarioConfiguration"] = o.PrepareScenarioConfiguration
	}
	if o.TeardownScenarioConfiguration != nil {
		toSerialize["teardownScenarioConfiguration"] = o.TeardownScenarioConfiguration
	}
	return json.Marshal(toSerialize)
}

type NullableInputScenario struct {
	value *InputScenario
	isSet bool
}

func (v NullableInputScenario) Get() *InputScenario {
	return v.value
}

func (v *NullableInputScenario) Set(val *InputScenario) {
	v.value = val
	v.isSet = true
}

func (v NullableInputScenario) IsSet() bool {
	return v.isSet
}

func (v *NullableInputScenario) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputScenario(val *InputScenario) *NullableInputScenario {
	return &NullableInputScenario{value: val, isSet: true}
}

func (v NullableInputScenario) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputScenario) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


