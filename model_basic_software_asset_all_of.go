/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// BasicSoftwareAssetAllOf struct for BasicSoftwareAssetAllOf
type BasicSoftwareAssetAllOf struct {
	SoftwareType *string `json:"softwareType,omitempty"`
}

// NewBasicSoftwareAssetAllOf instantiates a new BasicSoftwareAssetAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicSoftwareAssetAllOf() *BasicSoftwareAssetAllOf {
	this := BasicSoftwareAssetAllOf{}
	return &this
}

// NewBasicSoftwareAssetAllOfWithDefaults instantiates a new BasicSoftwareAssetAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicSoftwareAssetAllOfWithDefaults() *BasicSoftwareAssetAllOf {
	this := BasicSoftwareAssetAllOf{}
	return &this
}

// GetSoftwareType returns the SoftwareType field value if set, zero value otherwise.
func (o *BasicSoftwareAssetAllOf) GetSoftwareType() string {
	if o == nil || o.SoftwareType == nil {
		var ret string
		return ret
	}
	return *o.SoftwareType
}

// GetSoftwareTypeOk returns a tuple with the SoftwareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicSoftwareAssetAllOf) GetSoftwareTypeOk() (*string, bool) {
	if o == nil || o.SoftwareType == nil {
		return nil, false
	}
	return o.SoftwareType, true
}

// HasSoftwareType returns a boolean if a field has been set.
func (o *BasicSoftwareAssetAllOf) HasSoftwareType() bool {
	if o != nil && o.SoftwareType != nil {
		return true
	}

	return false
}

// SetSoftwareType gets a reference to the given string and assigns it to the SoftwareType field.
func (o *BasicSoftwareAssetAllOf) SetSoftwareType(v string) {
	o.SoftwareType = &v
}

func (o BasicSoftwareAssetAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SoftwareType != nil {
		toSerialize["softwareType"] = o.SoftwareType
	}
	return json.Marshal(toSerialize)
}

type NullableBasicSoftwareAssetAllOf struct {
	value *BasicSoftwareAssetAllOf
	isSet bool
}

func (v NullableBasicSoftwareAssetAllOf) Get() *BasicSoftwareAssetAllOf {
	return v.value
}

func (v *NullableBasicSoftwareAssetAllOf) Set(val *BasicSoftwareAssetAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicSoftwareAssetAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicSoftwareAssetAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicSoftwareAssetAllOf(val *BasicSoftwareAssetAllOf) *NullableBasicSoftwareAssetAllOf {
	return &NullableBasicSoftwareAssetAllOf{value: val, isSet: true}
}

func (v NullableBasicSoftwareAssetAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicSoftwareAssetAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
