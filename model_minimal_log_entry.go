/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MinimalLogEntry struct for MinimalLogEntry
type MinimalLogEntry struct {
	Id          *int32  `json:"id,omitempty"`
	Message     *string `json:"message,omitempty"`
	ProjectName *string `json:"projectName,omitempty"`
	Severity    *string `json:"severity,omitempty"`
	Source      *string `json:"source,omitempty"`
	Time        *int32  `json:"time,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// NewMinimalLogEntry instantiates a new MinimalLogEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinimalLogEntry() *MinimalLogEntry {
	this := MinimalLogEntry{}
	return &this
}

// NewMinimalLogEntryWithDefaults instantiates a new MinimalLogEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinimalLogEntryWithDefaults() *MinimalLogEntry {
	this := MinimalLogEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MinimalLogEntry) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalLogEntry) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MinimalLogEntry) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MinimalLogEntry) SetId(v int32) {
	o.Id = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *MinimalLogEntry) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalLogEntry) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *MinimalLogEntry) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *MinimalLogEntry) SetMessage(v string) {
	o.Message = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *MinimalLogEntry) GetProjectName() string {
	if o == nil || o.ProjectName == nil {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalLogEntry) GetProjectNameOk() (*string, bool) {
	if o == nil || o.ProjectName == nil {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *MinimalLogEntry) HasProjectName() bool {
	if o != nil && o.ProjectName != nil {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *MinimalLogEntry) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *MinimalLogEntry) GetSeverity() string {
	if o == nil || o.Severity == nil {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalLogEntry) GetSeverityOk() (*string, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *MinimalLogEntry) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *MinimalLogEntry) SetSeverity(v string) {
	o.Severity = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *MinimalLogEntry) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalLogEntry) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *MinimalLogEntry) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *MinimalLogEntry) SetSource(v string) {
	o.Source = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *MinimalLogEntry) GetTime() int32 {
	if o == nil || o.Time == nil {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalLogEntry) GetTimeOk() (*int32, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *MinimalLogEntry) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *MinimalLogEntry) SetTime(v int32) {
	o.Time = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *MinimalLogEntry) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalLogEntry) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *MinimalLogEntry) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *MinimalLogEntry) SetUsername(v string) {
	o.Username = &v
}

func (o MinimalLogEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.ProjectName != nil {
		toSerialize["projectName"] = o.ProjectName
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableMinimalLogEntry struct {
	value *MinimalLogEntry
	isSet bool
}

func (v NullableMinimalLogEntry) Get() *MinimalLogEntry {
	return v.value
}

func (v *NullableMinimalLogEntry) Set(val *MinimalLogEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimalLogEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimalLogEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimalLogEntry(val *MinimalLogEntry) *NullableMinimalLogEntry {
	return &NullableMinimalLogEntry{value: val, isSet: true}
}

func (v NullableMinimalLogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimalLogEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
