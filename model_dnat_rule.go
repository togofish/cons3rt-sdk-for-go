/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DnatRule struct for DnatRule
type DnatRule struct {
	DnatEnabled    bool   `json:"dnatEnabled"`
	DnatPort       string `json:"dnatPort"`
	DnatProtocol   string `json:"dnatProtocol"`
	DnatTargetIp   string `json:"dnatTargetIp"`
	DnatTargetPort string `json:"dnatTargetPort"`
	Id             *int32 `json:"id,omitempty"`
}

// NewDnatRule instantiates a new DnatRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnatRule(dnatEnabled bool, dnatPort string, dnatProtocol string, dnatTargetIp string, dnatTargetPort string) *DnatRule {
	this := DnatRule{}
	this.DnatEnabled = dnatEnabled
	this.DnatPort = dnatPort
	this.DnatProtocol = dnatProtocol
	this.DnatTargetIp = dnatTargetIp
	this.DnatTargetPort = dnatTargetPort
	return &this
}

// NewDnatRuleWithDefaults instantiates a new DnatRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnatRuleWithDefaults() *DnatRule {
	this := DnatRule{}
	return &this
}

// GetDnatEnabled returns the DnatEnabled field value
func (o *DnatRule) GetDnatEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DnatEnabled
}

// GetDnatEnabledOk returns a tuple with the DnatEnabled field value
// and a boolean to check if the value has been set.
func (o *DnatRule) GetDnatEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnatEnabled, true
}

// SetDnatEnabled sets field value
func (o *DnatRule) SetDnatEnabled(v bool) {
	o.DnatEnabled = v
}

// GetDnatPort returns the DnatPort field value
func (o *DnatRule) GetDnatPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DnatPort
}

// GetDnatPortOk returns a tuple with the DnatPort field value
// and a boolean to check if the value has been set.
func (o *DnatRule) GetDnatPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnatPort, true
}

// SetDnatPort sets field value
func (o *DnatRule) SetDnatPort(v string) {
	o.DnatPort = v
}

// GetDnatProtocol returns the DnatProtocol field value
func (o *DnatRule) GetDnatProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DnatProtocol
}

// GetDnatProtocolOk returns a tuple with the DnatProtocol field value
// and a boolean to check if the value has been set.
func (o *DnatRule) GetDnatProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnatProtocol, true
}

// SetDnatProtocol sets field value
func (o *DnatRule) SetDnatProtocol(v string) {
	o.DnatProtocol = v
}

// GetDnatTargetIp returns the DnatTargetIp field value
func (o *DnatRule) GetDnatTargetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DnatTargetIp
}

// GetDnatTargetIpOk returns a tuple with the DnatTargetIp field value
// and a boolean to check if the value has been set.
func (o *DnatRule) GetDnatTargetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnatTargetIp, true
}

// SetDnatTargetIp sets field value
func (o *DnatRule) SetDnatTargetIp(v string) {
	o.DnatTargetIp = v
}

// GetDnatTargetPort returns the DnatTargetPort field value
func (o *DnatRule) GetDnatTargetPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DnatTargetPort
}

// GetDnatTargetPortOk returns a tuple with the DnatTargetPort field value
// and a boolean to check if the value has been set.
func (o *DnatRule) GetDnatTargetPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnatTargetPort, true
}

// SetDnatTargetPort sets field value
func (o *DnatRule) SetDnatTargetPort(v string) {
	o.DnatTargetPort = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DnatRule) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnatRule) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DnatRule) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DnatRule) SetId(v int32) {
	o.Id = &v
}

func (o DnatRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dnatEnabled"] = o.DnatEnabled
	}
	if true {
		toSerialize["dnatPort"] = o.DnatPort
	}
	if true {
		toSerialize["dnatProtocol"] = o.DnatProtocol
	}
	if true {
		toSerialize["dnatTargetIp"] = o.DnatTargetIp
	}
	if true {
		toSerialize["dnatTargetPort"] = o.DnatTargetPort
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableDnatRule struct {
	value *DnatRule
	isSet bool
}

func (v NullableDnatRule) Get() *DnatRule {
	return v.value
}

func (v *NullableDnatRule) Set(val *DnatRule) {
	v.value = val
	v.isSet = true
}

func (v NullableDnatRule) IsSet() bool {
	return v.isSet
}

func (v *NullableDnatRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnatRule(val *DnatRule) *NullableDnatRule {
	return &NullableDnatRule{value: val, isSet: true}
}

func (v NullableDnatRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnatRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
