/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// InputPhysicalHostFull struct for InputPhysicalHostFull
type InputPhysicalHostFull struct {
	Id              *int32                    `json:"id,omitempty"`
	Name            *string                   `json:"name,omitempty"`
	PhysicalMachine *InputPhysicalMachine     `json:"physicalMachine,omitempty"`
	Components      *[]InputAbstractComponent `json:"components,omitempty"`
	Subtype         string
}

// NewInputPhysicalHostFull instantiates a new InputPhysicalHostFull object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputPhysicalHostFull(subtype string) *InputPhysicalHostFull {
	this := InputPhysicalHostFull{}
	this.Subtype = subtype
	return &this
}

// NewInputPhysicalHostFullWithDefaults instantiates a new InputPhysicalHostFull object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputPhysicalHostFullWithDefaults() *InputPhysicalHostFull {
	this := InputPhysicalHostFull{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InputPhysicalHostFull) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputPhysicalHostFull) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InputPhysicalHostFull) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *InputPhysicalHostFull) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InputPhysicalHostFull) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputPhysicalHostFull) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InputPhysicalHostFull) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InputPhysicalHostFull) SetName(v string) {
	o.Name = &v
}

// GetPhysicalMachine returns the PhysicalMachine field value if set, zero value otherwise.
func (o *InputPhysicalHostFull) GetPhysicalMachine() InputPhysicalMachine {
	if o == nil || o.PhysicalMachine == nil {
		var ret InputPhysicalMachine
		return ret
	}
	return *o.PhysicalMachine
}

// GetPhysicalMachineOk returns a tuple with the PhysicalMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputPhysicalHostFull) GetPhysicalMachineOk() (*InputPhysicalMachine, bool) {
	if o == nil || o.PhysicalMachine == nil {
		return nil, false
	}
	return o.PhysicalMachine, true
}

// HasPhysicalMachine returns a boolean if a field has been set.
func (o *InputPhysicalHostFull) HasPhysicalMachine() bool {
	if o != nil && o.PhysicalMachine != nil {
		return true
	}

	return false
}

// SetPhysicalMachine gets a reference to the given InputPhysicalMachine and assigns it to the PhysicalMachine field.
func (o *InputPhysicalHostFull) SetPhysicalMachine(v InputPhysicalMachine) {
	o.PhysicalMachine = &v
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *InputPhysicalHostFull) GetComponents() []InputAbstractComponent {
	if o == nil || o.Components == nil {
		var ret []InputAbstractComponent
		return ret
	}
	return *o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputPhysicalHostFull) GetComponentsOk() (*[]InputAbstractComponent, bool) {
	if o == nil || o.Components == nil {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *InputPhysicalHostFull) HasComponents() bool {
	if o != nil && o.Components != nil {
		return true
	}

	return false
}

// SetComponents gets a reference to the given []InputAbstractComponent and assigns it to the Components field.
func (o *InputPhysicalHostFull) SetComponents(v []InputAbstractComponent) {
	o.Components = &v
}

func (o InputPhysicalHostFull) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.PhysicalMachine != nil {
		toSerialize["physicalMachine"] = o.PhysicalMachine
	}
	if o.Components != nil {
		toSerialize["components"] = o.Components
	}
	return json.Marshal(toSerialize)
}

type NullableInputPhysicalHostFull struct {
	value *InputPhysicalHostFull
	isSet bool
}

func (v NullableInputPhysicalHostFull) Get() *InputPhysicalHostFull {
	return v.value
}

func (v *NullableInputPhysicalHostFull) Set(val *InputPhysicalHostFull) {
	v.value = val
	v.isSet = true
}

func (v NullableInputPhysicalHostFull) IsSet() bool {
	return v.isSet
}

func (v *NullableInputPhysicalHostFull) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputPhysicalHostFull(val *InputPhysicalHostFull) *NullableInputPhysicalHostFull {
	return &NullableInputPhysicalHostFull{value: val, isSet: true}
}

func (v NullableInputPhysicalHostFull) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputPhysicalHostFull) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
