/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// MinimalConfiguration struct for MinimalConfiguration
type MinimalConfiguration struct {
	ConfigurationScriptType *string `json:"configurationScriptType,omitempty"`
	ScriptName              *string `json:"scriptName,omitempty"`
	Script                  *string `json:"script,omitempty"`
}

// NewMinimalConfiguration instantiates a new MinimalConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinimalConfiguration() *MinimalConfiguration {
	this := MinimalConfiguration{}
	return &this
}

// NewMinimalConfigurationWithDefaults instantiates a new MinimalConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinimalConfigurationWithDefaults() *MinimalConfiguration {
	this := MinimalConfiguration{}
	return &this
}

// GetConfigurationScriptType returns the ConfigurationScriptType field value if set, zero value otherwise.
func (o *MinimalConfiguration) GetConfigurationScriptType() string {
	if o == nil || o.ConfigurationScriptType == nil {
		var ret string
		return ret
	}
	return *o.ConfigurationScriptType
}

// GetConfigurationScriptTypeOk returns a tuple with the ConfigurationScriptType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalConfiguration) GetConfigurationScriptTypeOk() (*string, bool) {
	if o == nil || o.ConfigurationScriptType == nil {
		return nil, false
	}
	return o.ConfigurationScriptType, true
}

// HasConfigurationScriptType returns a boolean if a field has been set.
func (o *MinimalConfiguration) HasConfigurationScriptType() bool {
	if o != nil && o.ConfigurationScriptType != nil {
		return true
	}

	return false
}

// SetConfigurationScriptType gets a reference to the given string and assigns it to the ConfigurationScriptType field.
func (o *MinimalConfiguration) SetConfigurationScriptType(v string) {
	o.ConfigurationScriptType = &v
}

// GetScriptName returns the ScriptName field value if set, zero value otherwise.
func (o *MinimalConfiguration) GetScriptName() string {
	if o == nil || o.ScriptName == nil {
		var ret string
		return ret
	}
	return *o.ScriptName
}

// GetScriptNameOk returns a tuple with the ScriptName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalConfiguration) GetScriptNameOk() (*string, bool) {
	if o == nil || o.ScriptName == nil {
		return nil, false
	}
	return o.ScriptName, true
}

// HasScriptName returns a boolean if a field has been set.
func (o *MinimalConfiguration) HasScriptName() bool {
	if o != nil && o.ScriptName != nil {
		return true
	}

	return false
}

// SetScriptName gets a reference to the given string and assigns it to the ScriptName field.
func (o *MinimalConfiguration) SetScriptName(v string) {
	o.ScriptName = &v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *MinimalConfiguration) GetScript() string {
	if o == nil || o.Script == nil {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalConfiguration) GetScriptOk() (*string, bool) {
	if o == nil || o.Script == nil {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *MinimalConfiguration) HasScript() bool {
	if o != nil && o.Script != nil {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *MinimalConfiguration) SetScript(v string) {
	o.Script = &v
}

func (o MinimalConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigurationScriptType != nil {
		toSerialize["configurationScriptType"] = o.ConfigurationScriptType
	}
	if o.ScriptName != nil {
		toSerialize["scriptName"] = o.ScriptName
	}
	if o.Script != nil {
		toSerialize["script"] = o.Script
	}
	return json.Marshal(toSerialize)
}

type NullableMinimalConfiguration struct {
	value *MinimalConfiguration
	isSet bool
}

func (v NullableMinimalConfiguration) Get() *MinimalConfiguration {
	return v.value
}

func (v *NullableMinimalConfiguration) Set(val *MinimalConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimalConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimalConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimalConfiguration(val *MinimalConfiguration) *NullableMinimalConfiguration {
	return &NullableMinimalConfiguration{value: val, isSet: true}
}

func (v NullableMinimalConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimalConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
