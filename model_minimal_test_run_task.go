/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MinimalTestRunTask struct for MinimalTestRunTask
type MinimalTestRunTask struct {
	Creator           *MinimalUser       `json:"creator,omitempty"`
	Id                *int32             `json:"id,omitempty"`
	Project           *MinimalProject    `json:"project,omitempty"`
	Result            *string            `json:"result,omitempty"`
	StartTime         *int32             `json:"startTime,omitempty"`
	ReportUri         *string            `json:"reportUri,omitempty"`
	TestBundle        *MinimalTestBundle `json:"testBundle,omitempty"`
	TestManagerStatus *string            `json:"testManagerStatus,omitempty"`
	TestResult        *string            `json:"testResult,omitempty"`
}

// NewMinimalTestRunTask instantiates a new MinimalTestRunTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinimalTestRunTask() *MinimalTestRunTask {
	this := MinimalTestRunTask{}
	return &this
}

// NewMinimalTestRunTaskWithDefaults instantiates a new MinimalTestRunTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinimalTestRunTaskWithDefaults() *MinimalTestRunTask {
	this := MinimalTestRunTask{}
	return &this
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *MinimalTestRunTask) GetCreator() MinimalUser {
	if o == nil || o.Creator == nil {
		var ret MinimalUser
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTestRunTask) GetCreatorOk() (*MinimalUser, bool) {
	if o == nil || o.Creator == nil {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *MinimalTestRunTask) HasCreator() bool {
	if o != nil && o.Creator != nil {
		return true
	}

	return false
}

// SetCreator gets a reference to the given MinimalUser and assigns it to the Creator field.
func (o *MinimalTestRunTask) SetCreator(v MinimalUser) {
	o.Creator = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MinimalTestRunTask) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTestRunTask) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MinimalTestRunTask) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MinimalTestRunTask) SetId(v int32) {
	o.Id = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *MinimalTestRunTask) GetProject() MinimalProject {
	if o == nil || o.Project == nil {
		var ret MinimalProject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTestRunTask) GetProjectOk() (*MinimalProject, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *MinimalTestRunTask) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given MinimalProject and assigns it to the Project field.
func (o *MinimalTestRunTask) SetProject(v MinimalProject) {
	o.Project = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *MinimalTestRunTask) GetResult() string {
	if o == nil || o.Result == nil {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTestRunTask) GetResultOk() (*string, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *MinimalTestRunTask) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *MinimalTestRunTask) SetResult(v string) {
	o.Result = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *MinimalTestRunTask) GetStartTime() int32 {
	if o == nil || o.StartTime == nil {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTestRunTask) GetStartTimeOk() (*int32, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *MinimalTestRunTask) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *MinimalTestRunTask) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetReportUri returns the ReportUri field value if set, zero value otherwise.
func (o *MinimalTestRunTask) GetReportUri() string {
	if o == nil || o.ReportUri == nil {
		var ret string
		return ret
	}
	return *o.ReportUri
}

// GetReportUriOk returns a tuple with the ReportUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTestRunTask) GetReportUriOk() (*string, bool) {
	if o == nil || o.ReportUri == nil {
		return nil, false
	}
	return o.ReportUri, true
}

// HasReportUri returns a boolean if a field has been set.
func (o *MinimalTestRunTask) HasReportUri() bool {
	if o != nil && o.ReportUri != nil {
		return true
	}

	return false
}

// SetReportUri gets a reference to the given string and assigns it to the ReportUri field.
func (o *MinimalTestRunTask) SetReportUri(v string) {
	o.ReportUri = &v
}

// GetTestBundle returns the TestBundle field value if set, zero value otherwise.
func (o *MinimalTestRunTask) GetTestBundle() MinimalTestBundle {
	if o == nil || o.TestBundle == nil {
		var ret MinimalTestBundle
		return ret
	}
	return *o.TestBundle
}

// GetTestBundleOk returns a tuple with the TestBundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTestRunTask) GetTestBundleOk() (*MinimalTestBundle, bool) {
	if o == nil || o.TestBundle == nil {
		return nil, false
	}
	return o.TestBundle, true
}

// HasTestBundle returns a boolean if a field has been set.
func (o *MinimalTestRunTask) HasTestBundle() bool {
	if o != nil && o.TestBundle != nil {
		return true
	}

	return false
}

// SetTestBundle gets a reference to the given MinimalTestBundle and assigns it to the TestBundle field.
func (o *MinimalTestRunTask) SetTestBundle(v MinimalTestBundle) {
	o.TestBundle = &v
}

// GetTestManagerStatus returns the TestManagerStatus field value if set, zero value otherwise.
func (o *MinimalTestRunTask) GetTestManagerStatus() string {
	if o == nil || o.TestManagerStatus == nil {
		var ret string
		return ret
	}
	return *o.TestManagerStatus
}

// GetTestManagerStatusOk returns a tuple with the TestManagerStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTestRunTask) GetTestManagerStatusOk() (*string, bool) {
	if o == nil || o.TestManagerStatus == nil {
		return nil, false
	}
	return o.TestManagerStatus, true
}

// HasTestManagerStatus returns a boolean if a field has been set.
func (o *MinimalTestRunTask) HasTestManagerStatus() bool {
	if o != nil && o.TestManagerStatus != nil {
		return true
	}

	return false
}

// SetTestManagerStatus gets a reference to the given string and assigns it to the TestManagerStatus field.
func (o *MinimalTestRunTask) SetTestManagerStatus(v string) {
	o.TestManagerStatus = &v
}

// GetTestResult returns the TestResult field value if set, zero value otherwise.
func (o *MinimalTestRunTask) GetTestResult() string {
	if o == nil || o.TestResult == nil {
		var ret string
		return ret
	}
	return *o.TestResult
}

// GetTestResultOk returns a tuple with the TestResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalTestRunTask) GetTestResultOk() (*string, bool) {
	if o == nil || o.TestResult == nil {
		return nil, false
	}
	return o.TestResult, true
}

// HasTestResult returns a boolean if a field has been set.
func (o *MinimalTestRunTask) HasTestResult() bool {
	if o != nil && o.TestResult != nil {
		return true
	}

	return false
}

// SetTestResult gets a reference to the given string and assigns it to the TestResult field.
func (o *MinimalTestRunTask) SetTestResult(v string) {
	o.TestResult = &v
}

func (o MinimalTestRunTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Creator != nil {
		toSerialize["creator"] = o.Creator
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	if o.ReportUri != nil {
		toSerialize["reportUri"] = o.ReportUri
	}
	if o.TestBundle != nil {
		toSerialize["testBundle"] = o.TestBundle
	}
	if o.TestManagerStatus != nil {
		toSerialize["testManagerStatus"] = o.TestManagerStatus
	}
	if o.TestResult != nil {
		toSerialize["testResult"] = o.TestResult
	}
	return json.Marshal(toSerialize)
}

type NullableMinimalTestRunTask struct {
	value *MinimalTestRunTask
	isSet bool
}

func (v NullableMinimalTestRunTask) Get() *MinimalTestRunTask {
	return v.value
}

func (v *NullableMinimalTestRunTask) Set(val *MinimalTestRunTask) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimalTestRunTask) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimalTestRunTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimalTestRunTask(val *MinimalTestRunTask) *NullableMinimalTestRunTask {
	return &NullableMinimalTestRunTask{value: val, isSet: true}
}

func (v NullableMinimalTestRunTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimalTestRunTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
