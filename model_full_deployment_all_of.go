/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gocons3rt

import (
	"encoding/json"
)

// FullDeploymentAllOf struct for FullDeploymentAllOf
type FullDeploymentAllOf struct {
	RecurringSchedules *[]MinimalRecurringSchedule `json:"recurringSchedules,omitempty"`
	Scenario *[]GeneralScenario `json:"scenario,omitempty"`
	TestBundles *[]MinimalTestBundle `json:"testBundles,omitempty"`
	DeploymentHosts *[]MinimalDeploymentHost `json:"deploymentHosts,omitempty"`
}

// NewFullDeploymentAllOf instantiates a new FullDeploymentAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFullDeploymentAllOf() *FullDeploymentAllOf {
	this := FullDeploymentAllOf{}
	return &this
}

// NewFullDeploymentAllOfWithDefaults instantiates a new FullDeploymentAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFullDeploymentAllOfWithDefaults() *FullDeploymentAllOf {
	this := FullDeploymentAllOf{}
	return &this
}

// GetRecurringSchedules returns the RecurringSchedules field value if set, zero value otherwise.
func (o *FullDeploymentAllOf) GetRecurringSchedules() []MinimalRecurringSchedule {
	if o == nil || o.RecurringSchedules == nil {
		var ret []MinimalRecurringSchedule
		return ret
	}
	return *o.RecurringSchedules
}

// GetRecurringSchedulesOk returns a tuple with the RecurringSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullDeploymentAllOf) GetRecurringSchedulesOk() (*[]MinimalRecurringSchedule, bool) {
	if o == nil || o.RecurringSchedules == nil {
		return nil, false
	}
	return o.RecurringSchedules, true
}

// HasRecurringSchedules returns a boolean if a field has been set.
func (o *FullDeploymentAllOf) HasRecurringSchedules() bool {
	if o != nil && o.RecurringSchedules != nil {
		return true
	}

	return false
}

// SetRecurringSchedules gets a reference to the given []MinimalRecurringSchedule and assigns it to the RecurringSchedules field.
func (o *FullDeploymentAllOf) SetRecurringSchedules(v []MinimalRecurringSchedule) {
	o.RecurringSchedules = &v
}

// GetScenario returns the Scenario field value if set, zero value otherwise.
func (o *FullDeploymentAllOf) GetScenario() []GeneralScenario {
	if o == nil || o.Scenario == nil {
		var ret []GeneralScenario
		return ret
	}
	return *o.Scenario
}

// GetScenarioOk returns a tuple with the Scenario field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullDeploymentAllOf) GetScenarioOk() (*[]GeneralScenario, bool) {
	if o == nil || o.Scenario == nil {
		return nil, false
	}
	return o.Scenario, true
}

// HasScenario returns a boolean if a field has been set.
func (o *FullDeploymentAllOf) HasScenario() bool {
	if o != nil && o.Scenario != nil {
		return true
	}

	return false
}

// SetScenario gets a reference to the given []GeneralScenario and assigns it to the Scenario field.
func (o *FullDeploymentAllOf) SetScenario(v []GeneralScenario) {
	o.Scenario = &v
}

// GetTestBundles returns the TestBundles field value if set, zero value otherwise.
func (o *FullDeploymentAllOf) GetTestBundles() []MinimalTestBundle {
	if o == nil || o.TestBundles == nil {
		var ret []MinimalTestBundle
		return ret
	}
	return *o.TestBundles
}

// GetTestBundlesOk returns a tuple with the TestBundles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullDeploymentAllOf) GetTestBundlesOk() (*[]MinimalTestBundle, bool) {
	if o == nil || o.TestBundles == nil {
		return nil, false
	}
	return o.TestBundles, true
}

// HasTestBundles returns a boolean if a field has been set.
func (o *FullDeploymentAllOf) HasTestBundles() bool {
	if o != nil && o.TestBundles != nil {
		return true
	}

	return false
}

// SetTestBundles gets a reference to the given []MinimalTestBundle and assigns it to the TestBundles field.
func (o *FullDeploymentAllOf) SetTestBundles(v []MinimalTestBundle) {
	o.TestBundles = &v
}

// GetDeploymentHosts returns the DeploymentHosts field value if set, zero value otherwise.
func (o *FullDeploymentAllOf) GetDeploymentHosts() []MinimalDeploymentHost {
	if o == nil || o.DeploymentHosts == nil {
		var ret []MinimalDeploymentHost
		return ret
	}
	return *o.DeploymentHosts
}

// GetDeploymentHostsOk returns a tuple with the DeploymentHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullDeploymentAllOf) GetDeploymentHostsOk() (*[]MinimalDeploymentHost, bool) {
	if o == nil || o.DeploymentHosts == nil {
		return nil, false
	}
	return o.DeploymentHosts, true
}

// HasDeploymentHosts returns a boolean if a field has been set.
func (o *FullDeploymentAllOf) HasDeploymentHosts() bool {
	if o != nil && o.DeploymentHosts != nil {
		return true
	}

	return false
}

// SetDeploymentHosts gets a reference to the given []MinimalDeploymentHost and assigns it to the DeploymentHosts field.
func (o *FullDeploymentAllOf) SetDeploymentHosts(v []MinimalDeploymentHost) {
	o.DeploymentHosts = &v
}

func (o FullDeploymentAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecurringSchedules != nil {
		toSerialize["recurringSchedules"] = o.RecurringSchedules
	}
	if o.Scenario != nil {
		toSerialize["scenario"] = o.Scenario
	}
	if o.TestBundles != nil {
		toSerialize["testBundles"] = o.TestBundles
	}
	if o.DeploymentHosts != nil {
		toSerialize["deploymentHosts"] = o.DeploymentHosts
	}
	return json.Marshal(toSerialize)
}

type NullableFullDeploymentAllOf struct {
	value *FullDeploymentAllOf
	isSet bool
}

func (v NullableFullDeploymentAllOf) Get() *FullDeploymentAllOf {
	return v.value
}

func (v *NullableFullDeploymentAllOf) Set(val *FullDeploymentAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFullDeploymentAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFullDeploymentAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFullDeploymentAllOf(val *FullDeploymentAllOf) *NullableFullDeploymentAllOf {
	return &NullableFullDeploymentAllOf{value: val, isSet: true}
}

func (v NullableFullDeploymentAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFullDeploymentAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


