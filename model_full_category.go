/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// FullCategory struct for FullCategory
type FullCategory struct {
	Disruptive    *bool              `json:"disruptive,omitempty"`
	Editable      *bool              `json:"editable,omitempty"`
	Hidden        *bool              `json:"hidden,omitempty"`
	Id            *int32             `json:"id,omitempty"`
	Name          *string            `json:"name,omitempty"`
	Parent        *MinimalCategory   `json:"parent,omitempty"`
	Subcategories *[]MinimalCategory `json:"subcategories,omitempty"`
}

// NewFullCategory instantiates a new FullCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFullCategory() *FullCategory {
	this := FullCategory{}
	return &this
}

// NewFullCategoryWithDefaults instantiates a new FullCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFullCategoryWithDefaults() *FullCategory {
	this := FullCategory{}
	return &this
}

// GetDisruptive returns the Disruptive field value if set, zero value otherwise.
func (o *FullCategory) GetDisruptive() bool {
	if o == nil || o.Disruptive == nil {
		var ret bool
		return ret
	}
	return *o.Disruptive
}

// GetDisruptiveOk returns a tuple with the Disruptive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullCategory) GetDisruptiveOk() (*bool, bool) {
	if o == nil || o.Disruptive == nil {
		return nil, false
	}
	return o.Disruptive, true
}

// HasDisruptive returns a boolean if a field has been set.
func (o *FullCategory) HasDisruptive() bool {
	if o != nil && o.Disruptive != nil {
		return true
	}

	return false
}

// SetDisruptive gets a reference to the given bool and assigns it to the Disruptive field.
func (o *FullCategory) SetDisruptive(v bool) {
	o.Disruptive = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *FullCategory) GetEditable() bool {
	if o == nil || o.Editable == nil {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullCategory) GetEditableOk() (*bool, bool) {
	if o == nil || o.Editable == nil {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *FullCategory) HasEditable() bool {
	if o != nil && o.Editable != nil {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *FullCategory) SetEditable(v bool) {
	o.Editable = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *FullCategory) GetHidden() bool {
	if o == nil || o.Hidden == nil {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullCategory) GetHiddenOk() (*bool, bool) {
	if o == nil || o.Hidden == nil {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *FullCategory) HasHidden() bool {
	if o != nil && o.Hidden != nil {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *FullCategory) SetHidden(v bool) {
	o.Hidden = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FullCategory) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullCategory) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FullCategory) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *FullCategory) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FullCategory) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullCategory) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FullCategory) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FullCategory) SetName(v string) {
	o.Name = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *FullCategory) GetParent() MinimalCategory {
	if o == nil || o.Parent == nil {
		var ret MinimalCategory
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullCategory) GetParentOk() (*MinimalCategory, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *FullCategory) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given MinimalCategory and assigns it to the Parent field.
func (o *FullCategory) SetParent(v MinimalCategory) {
	o.Parent = &v
}

// GetSubcategories returns the Subcategories field value if set, zero value otherwise.
func (o *FullCategory) GetSubcategories() []MinimalCategory {
	if o == nil || o.Subcategories == nil {
		var ret []MinimalCategory
		return ret
	}
	return *o.Subcategories
}

// GetSubcategoriesOk returns a tuple with the Subcategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullCategory) GetSubcategoriesOk() (*[]MinimalCategory, bool) {
	if o == nil || o.Subcategories == nil {
		return nil, false
	}
	return o.Subcategories, true
}

// HasSubcategories returns a boolean if a field has been set.
func (o *FullCategory) HasSubcategories() bool {
	if o != nil && o.Subcategories != nil {
		return true
	}

	return false
}

// SetSubcategories gets a reference to the given []MinimalCategory and assigns it to the Subcategories field.
func (o *FullCategory) SetSubcategories(v []MinimalCategory) {
	o.Subcategories = &v
}

func (o FullCategory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Disruptive != nil {
		toSerialize["disruptive"] = o.Disruptive
	}
	if o.Editable != nil {
		toSerialize["editable"] = o.Editable
	}
	if o.Hidden != nil {
		toSerialize["hidden"] = o.Hidden
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.Subcategories != nil {
		toSerialize["subcategories"] = o.Subcategories
	}
	return json.Marshal(toSerialize)
}

type NullableFullCategory struct {
	value *FullCategory
	isSet bool
}

func (v NullableFullCategory) Get() *FullCategory {
	return v.value
}

func (v *NullableFullCategory) Set(val *FullCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableFullCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableFullCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFullCategory(val *FullCategory) *NullableFullCategory {
	return &NullableFullCategory{value: val, isSet: true}
}

func (v NullableFullCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFullCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
