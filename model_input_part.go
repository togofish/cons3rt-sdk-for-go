/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gocons3rt

import (
	"encoding/json"
)

// InputPart struct for InputPart
type InputPart struct {
	Headers *map[string][]string `json:"headers,omitempty"`
	BodyAsString *string `json:"bodyAsString,omitempty"`
	MediaType *InputPartMediaType `json:"mediaType,omitempty"`
	ContentTypeFromMessage *bool `json:"contentTypeFromMessage,omitempty"`
}

// NewInputPart instantiates a new InputPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputPart() *InputPart {
	this := InputPart{}
	return &this
}

// NewInputPartWithDefaults instantiates a new InputPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputPartWithDefaults() *InputPart {
	this := InputPart{}
	return &this
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *InputPart) GetHeaders() map[string][]string {
	if o == nil || o.Headers == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputPart) GetHeadersOk() (*map[string][]string, bool) {
	if o == nil || o.Headers == nil {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *InputPart) HasHeaders() bool {
	if o != nil && o.Headers != nil {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string][]string and assigns it to the Headers field.
func (o *InputPart) SetHeaders(v map[string][]string) {
	o.Headers = &v
}

// GetBodyAsString returns the BodyAsString field value if set, zero value otherwise.
func (o *InputPart) GetBodyAsString() string {
	if o == nil || o.BodyAsString == nil {
		var ret string
		return ret
	}
	return *o.BodyAsString
}

// GetBodyAsStringOk returns a tuple with the BodyAsString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputPart) GetBodyAsStringOk() (*string, bool) {
	if o == nil || o.BodyAsString == nil {
		return nil, false
	}
	return o.BodyAsString, true
}

// HasBodyAsString returns a boolean if a field has been set.
func (o *InputPart) HasBodyAsString() bool {
	if o != nil && o.BodyAsString != nil {
		return true
	}

	return false
}

// SetBodyAsString gets a reference to the given string and assigns it to the BodyAsString field.
func (o *InputPart) SetBodyAsString(v string) {
	o.BodyAsString = &v
}

// GetMediaType returns the MediaType field value if set, zero value otherwise.
func (o *InputPart) GetMediaType() InputPartMediaType {
	if o == nil || o.MediaType == nil {
		var ret InputPartMediaType
		return ret
	}
	return *o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputPart) GetMediaTypeOk() (*InputPartMediaType, bool) {
	if o == nil || o.MediaType == nil {
		return nil, false
	}
	return o.MediaType, true
}

// HasMediaType returns a boolean if a field has been set.
func (o *InputPart) HasMediaType() bool {
	if o != nil && o.MediaType != nil {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given InputPartMediaType and assigns it to the MediaType field.
func (o *InputPart) SetMediaType(v InputPartMediaType) {
	o.MediaType = &v
}

// GetContentTypeFromMessage returns the ContentTypeFromMessage field value if set, zero value otherwise.
func (o *InputPart) GetContentTypeFromMessage() bool {
	if o == nil || o.ContentTypeFromMessage == nil {
		var ret bool
		return ret
	}
	return *o.ContentTypeFromMessage
}

// GetContentTypeFromMessageOk returns a tuple with the ContentTypeFromMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputPart) GetContentTypeFromMessageOk() (*bool, bool) {
	if o == nil || o.ContentTypeFromMessage == nil {
		return nil, false
	}
	return o.ContentTypeFromMessage, true
}

// HasContentTypeFromMessage returns a boolean if a field has been set.
func (o *InputPart) HasContentTypeFromMessage() bool {
	if o != nil && o.ContentTypeFromMessage != nil {
		return true
	}

	return false
}

// SetContentTypeFromMessage gets a reference to the given bool and assigns it to the ContentTypeFromMessage field.
func (o *InputPart) SetContentTypeFromMessage(v bool) {
	o.ContentTypeFromMessage = &v
}

func (o InputPart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if o.BodyAsString != nil {
		toSerialize["bodyAsString"] = o.BodyAsString
	}
	if o.MediaType != nil {
		toSerialize["mediaType"] = o.MediaType
	}
	if o.ContentTypeFromMessage != nil {
		toSerialize["contentTypeFromMessage"] = o.ContentTypeFromMessage
	}
	return json.Marshal(toSerialize)
}

type NullableInputPart struct {
	value *InputPart
	isSet bool
}

func (v NullableInputPart) Get() *InputPart {
	return v.value
}

func (v *NullableInputPart) Set(val *InputPart) {
	v.value = val
	v.isSet = true
}

func (v NullableInputPart) IsSet() bool {
	return v.isSet
}

func (v *NullableInputPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputPart(val *InputPart) *NullableInputPart {
	return &NullableInputPart{value: val, isSet: true}
}

func (v NullableInputPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


