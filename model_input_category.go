/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gocons3rt

import (
	"encoding/json"
)

// InputCategory struct for InputCategory
type InputCategory struct {
	Disruptive *bool `json:"disruptive,omitempty"`
	Hidden *bool `json:"hidden,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Name string `json:"name"`
	Parent *InputParentCategory `json:"parent,omitempty"`
}

// NewInputCategory instantiates a new InputCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputCategory(name string) *InputCategory {
	this := InputCategory{}
	this.Name = name
	return &this
}

// NewInputCategoryWithDefaults instantiates a new InputCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputCategoryWithDefaults() *InputCategory {
	this := InputCategory{}
	return &this
}

// GetDisruptive returns the Disruptive field value if set, zero value otherwise.
func (o *InputCategory) GetDisruptive() bool {
	if o == nil || o.Disruptive == nil {
		var ret bool
		return ret
	}
	return *o.Disruptive
}

// GetDisruptiveOk returns a tuple with the Disruptive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputCategory) GetDisruptiveOk() (*bool, bool) {
	if o == nil || o.Disruptive == nil {
		return nil, false
	}
	return o.Disruptive, true
}

// HasDisruptive returns a boolean if a field has been set.
func (o *InputCategory) HasDisruptive() bool {
	if o != nil && o.Disruptive != nil {
		return true
	}

	return false
}

// SetDisruptive gets a reference to the given bool and assigns it to the Disruptive field.
func (o *InputCategory) SetDisruptive(v bool) {
	o.Disruptive = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *InputCategory) GetHidden() bool {
	if o == nil || o.Hidden == nil {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputCategory) GetHiddenOk() (*bool, bool) {
	if o == nil || o.Hidden == nil {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *InputCategory) HasHidden() bool {
	if o != nil && o.Hidden != nil {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *InputCategory) SetHidden(v bool) {
	o.Hidden = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InputCategory) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputCategory) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InputCategory) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *InputCategory) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *InputCategory) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InputCategory) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InputCategory) SetName(v string) {
	o.Name = v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *InputCategory) GetParent() InputParentCategory {
	if o == nil || o.Parent == nil {
		var ret InputParentCategory
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputCategory) GetParentOk() (*InputParentCategory, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *InputCategory) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given InputParentCategory and assigns it to the Parent field.
func (o *InputCategory) SetParent(v InputParentCategory) {
	o.Parent = &v
}

func (o InputCategory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Disruptive != nil {
		toSerialize["disruptive"] = o.Disruptive
	}
	if o.Hidden != nil {
		toSerialize["hidden"] = o.Hidden
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	return json.Marshal(toSerialize)
}

type NullableInputCategory struct {
	value *InputCategory
	isSet bool
}

func (v NullableInputCategory) Get() *InputCategory {
	return v.value
}

func (v *NullableInputCategory) Set(val *InputCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableInputCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableInputCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputCategory(val *InputCategory) *NullableInputCategory {
	return &NullableInputCategory{value: val, isSet: true}
}

func (v NullableInputCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


