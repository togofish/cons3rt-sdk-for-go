/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gocons3rt

import (
	"encoding/json"
)

// MultipartFormDataInput struct for MultipartFormDataInput
type MultipartFormDataInput struct {
	FormData *map[string]InputPart `json:"formData,omitempty"`
	FormDataMap *map[string][]InputPart `json:"formDataMap,omitempty"`
	Preamble *string `json:"preamble,omitempty"`
	Parts *[]InputPart `json:"parts,omitempty"`
}

// NewMultipartFormDataInput instantiates a new MultipartFormDataInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipartFormDataInput() *MultipartFormDataInput {
	this := MultipartFormDataInput{}
	return &this
}

// NewMultipartFormDataInputWithDefaults instantiates a new MultipartFormDataInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipartFormDataInputWithDefaults() *MultipartFormDataInput {
	this := MultipartFormDataInput{}
	return &this
}

// GetFormData returns the FormData field value if set, zero value otherwise.
func (o *MultipartFormDataInput) GetFormData() map[string]InputPart {
	if o == nil || o.FormData == nil {
		var ret map[string]InputPart
		return ret
	}
	return *o.FormData
}

// GetFormDataOk returns a tuple with the FormData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartFormDataInput) GetFormDataOk() (*map[string]InputPart, bool) {
	if o == nil || o.FormData == nil {
		return nil, false
	}
	return o.FormData, true
}

// HasFormData returns a boolean if a field has been set.
func (o *MultipartFormDataInput) HasFormData() bool {
	if o != nil && o.FormData != nil {
		return true
	}

	return false
}

// SetFormData gets a reference to the given map[string]InputPart and assigns it to the FormData field.
func (o *MultipartFormDataInput) SetFormData(v map[string]InputPart) {
	o.FormData = &v
}

// GetFormDataMap returns the FormDataMap field value if set, zero value otherwise.
func (o *MultipartFormDataInput) GetFormDataMap() map[string][]InputPart {
	if o == nil || o.FormDataMap == nil {
		var ret map[string][]InputPart
		return ret
	}
	return *o.FormDataMap
}

// GetFormDataMapOk returns a tuple with the FormDataMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartFormDataInput) GetFormDataMapOk() (*map[string][]InputPart, bool) {
	if o == nil || o.FormDataMap == nil {
		return nil, false
	}
	return o.FormDataMap, true
}

// HasFormDataMap returns a boolean if a field has been set.
func (o *MultipartFormDataInput) HasFormDataMap() bool {
	if o != nil && o.FormDataMap != nil {
		return true
	}

	return false
}

// SetFormDataMap gets a reference to the given map[string][]InputPart and assigns it to the FormDataMap field.
func (o *MultipartFormDataInput) SetFormDataMap(v map[string][]InputPart) {
	o.FormDataMap = &v
}

// GetPreamble returns the Preamble field value if set, zero value otherwise.
func (o *MultipartFormDataInput) GetPreamble() string {
	if o == nil || o.Preamble == nil {
		var ret string
		return ret
	}
	return *o.Preamble
}

// GetPreambleOk returns a tuple with the Preamble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartFormDataInput) GetPreambleOk() (*string, bool) {
	if o == nil || o.Preamble == nil {
		return nil, false
	}
	return o.Preamble, true
}

// HasPreamble returns a boolean if a field has been set.
func (o *MultipartFormDataInput) HasPreamble() bool {
	if o != nil && o.Preamble != nil {
		return true
	}

	return false
}

// SetPreamble gets a reference to the given string and assigns it to the Preamble field.
func (o *MultipartFormDataInput) SetPreamble(v string) {
	o.Preamble = &v
}

// GetParts returns the Parts field value if set, zero value otherwise.
func (o *MultipartFormDataInput) GetParts() []InputPart {
	if o == nil || o.Parts == nil {
		var ret []InputPart
		return ret
	}
	return *o.Parts
}

// GetPartsOk returns a tuple with the Parts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipartFormDataInput) GetPartsOk() (*[]InputPart, bool) {
	if o == nil || o.Parts == nil {
		return nil, false
	}
	return o.Parts, true
}

// HasParts returns a boolean if a field has been set.
func (o *MultipartFormDataInput) HasParts() bool {
	if o != nil && o.Parts != nil {
		return true
	}

	return false
}

// SetParts gets a reference to the given []InputPart and assigns it to the Parts field.
func (o *MultipartFormDataInput) SetParts(v []InputPart) {
	o.Parts = &v
}

func (o MultipartFormDataInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FormData != nil {
		toSerialize["formData"] = o.FormData
	}
	if o.FormDataMap != nil {
		toSerialize["formDataMap"] = o.FormDataMap
	}
	if o.Preamble != nil {
		toSerialize["preamble"] = o.Preamble
	}
	if o.Parts != nil {
		toSerialize["parts"] = o.Parts
	}
	return json.Marshal(toSerialize)
}

type NullableMultipartFormDataInput struct {
	value *MultipartFormDataInput
	isSet bool
}

func (v NullableMultipartFormDataInput) Get() *MultipartFormDataInput {
	return v.value
}

func (v *NullableMultipartFormDataInput) Set(val *MultipartFormDataInput) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipartFormDataInput) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipartFormDataInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipartFormDataInput(val *MultipartFormDataInput) *NullableMultipartFormDataInput {
	return &NullableMultipartFormDataInput{value: val, isSet: true}
}

func (v NullableMultipartFormDataInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipartFormDataInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


