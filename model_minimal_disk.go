/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// MinimalDisk struct for MinimalDisk
type MinimalDisk struct {
	CapacityInMegabytes *int32 `json:"capacityInMegabytes,omitempty"`
}

// NewMinimalDisk instantiates a new MinimalDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinimalDisk() *MinimalDisk {
	this := MinimalDisk{}
	return &this
}

// NewMinimalDiskWithDefaults instantiates a new MinimalDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinimalDiskWithDefaults() *MinimalDisk {
	this := MinimalDisk{}
	return &this
}

// GetCapacityInMegabytes returns the CapacityInMegabytes field value if set, zero value otherwise.
func (o *MinimalDisk) GetCapacityInMegabytes() int32 {
	if o == nil || o.CapacityInMegabytes == nil {
		var ret int32
		return ret
	}
	return *o.CapacityInMegabytes
}

// GetCapacityInMegabytesOk returns a tuple with the CapacityInMegabytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimalDisk) GetCapacityInMegabytesOk() (*int32, bool) {
	if o == nil || o.CapacityInMegabytes == nil {
		return nil, false
	}
	return o.CapacityInMegabytes, true
}

// HasCapacityInMegabytes returns a boolean if a field has been set.
func (o *MinimalDisk) HasCapacityInMegabytes() bool {
	if o != nil && o.CapacityInMegabytes != nil {
		return true
	}

	return false
}

// SetCapacityInMegabytes gets a reference to the given int32 and assigns it to the CapacityInMegabytes field.
func (o *MinimalDisk) SetCapacityInMegabytes(v int32) {
	o.CapacityInMegabytes = &v
}

func (o MinimalDisk) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CapacityInMegabytes != nil {
		toSerialize["capacityInMegabytes"] = o.CapacityInMegabytes
	}
	return json.Marshal(toSerialize)
}

type NullableMinimalDisk struct {
	value *MinimalDisk
	isSet bool
}

func (v NullableMinimalDisk) Get() *MinimalDisk {
	return v.value
}

func (v *NullableMinimalDisk) Set(val *MinimalDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimalDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimalDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimalDisk(val *MinimalDisk) *NullableMinimalDisk {
	return &NullableMinimalDisk{value: val, isSet: true}
}

func (v NullableMinimalDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimalDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
