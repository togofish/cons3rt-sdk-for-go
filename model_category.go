/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Category struct for Category
type Category struct {
	Disruptive    *bool       `json:"disruptive,omitempty"`
	Hidden        *bool       `json:"hidden,omitempty"`
	Id            int32       `json:"id"`
	Name          string      `json:"name"`
	Parent        *Category   `json:"parent,omitempty"`
	Subcategories *[]Category `json:"subcategories,omitempty"`
}

// NewCategory instantiates a new Category object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategory(id int32, name string) *Category {
	this := Category{}
	this.Id = id
	this.Name = name
	return &this
}

// NewCategoryWithDefaults instantiates a new Category object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryWithDefaults() *Category {
	this := Category{}
	return &this
}

// GetDisruptive returns the Disruptive field value if set, zero value otherwise.
func (o *Category) GetDisruptive() bool {
	if o == nil || o.Disruptive == nil {
		var ret bool
		return ret
	}
	return *o.Disruptive
}

// GetDisruptiveOk returns a tuple with the Disruptive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetDisruptiveOk() (*bool, bool) {
	if o == nil || o.Disruptive == nil {
		return nil, false
	}
	return o.Disruptive, true
}

// HasDisruptive returns a boolean if a field has been set.
func (o *Category) HasDisruptive() bool {
	if o != nil && o.Disruptive != nil {
		return true
	}

	return false
}

// SetDisruptive gets a reference to the given bool and assigns it to the Disruptive field.
func (o *Category) SetDisruptive(v bool) {
	o.Disruptive = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *Category) GetHidden() bool {
	if o == nil || o.Hidden == nil {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetHiddenOk() (*bool, bool) {
	if o == nil || o.Hidden == nil {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *Category) HasHidden() bool {
	if o != nil && o.Hidden != nil {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *Category) SetHidden(v bool) {
	o.Hidden = &v
}

// GetId returns the Id field value
func (o *Category) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Category) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Category) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Category) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Category) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Category) SetName(v string) {
	o.Name = v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *Category) GetParent() Category {
	if o == nil || o.Parent == nil {
		var ret Category
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetParentOk() (*Category, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *Category) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given Category and assigns it to the Parent field.
func (o *Category) SetParent(v Category) {
	o.Parent = &v
}

// GetSubcategories returns the Subcategories field value if set, zero value otherwise.
func (o *Category) GetSubcategories() []Category {
	if o == nil || o.Subcategories == nil {
		var ret []Category
		return ret
	}
	return *o.Subcategories
}

// GetSubcategoriesOk returns a tuple with the Subcategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetSubcategoriesOk() (*[]Category, bool) {
	if o == nil || o.Subcategories == nil {
		return nil, false
	}
	return o.Subcategories, true
}

// HasSubcategories returns a boolean if a field has been set.
func (o *Category) HasSubcategories() bool {
	if o != nil && o.Subcategories != nil {
		return true
	}

	return false
}

// SetSubcategories gets a reference to the given []Category and assigns it to the Subcategories field.
func (o *Category) SetSubcategories(v []Category) {
	o.Subcategories = &v
}

func (o Category) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Disruptive != nil {
		toSerialize["disruptive"] = o.Disruptive
	}
	if o.Hidden != nil {
		toSerialize["hidden"] = o.Hidden
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.Subcategories != nil {
		toSerialize["subcategories"] = o.Subcategories
	}
	return json.Marshal(toSerialize)
}

type NullableCategory struct {
	value *Category
	isSet bool
}

func (v NullableCategory) Get() *Category {
	return v.value
}

func (v *NullableCategory) Set(val *Category) {
	v.value = val
	v.isSet = true
}

func (v NullableCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategory(val *Category) *NullableCategory {
	return &NullableCategory{value: val, isSet: true}
}

func (v NullableCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
