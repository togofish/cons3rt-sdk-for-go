/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gocons3rt

import (
	"encoding/json"
)

// InstanceTypeFamily struct for InstanceTypeFamily
type InstanceTypeFamily struct {
	Family *string `json:"family,omitempty"`
	InstanceTypes *[]InstanceType `json:"instanceTypes,omitempty"`
}

// NewInstanceTypeFamily instantiates a new InstanceTypeFamily object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypeFamily() *InstanceTypeFamily {
	this := InstanceTypeFamily{}
	return &this
}

// NewInstanceTypeFamilyWithDefaults instantiates a new InstanceTypeFamily object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeFamilyWithDefaults() *InstanceTypeFamily {
	this := InstanceTypeFamily{}
	return &this
}

// GetFamily returns the Family field value if set, zero value otherwise.
func (o *InstanceTypeFamily) GetFamily() string {
	if o == nil || o.Family == nil {
		var ret string
		return ret
	}
	return *o.Family
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeFamily) GetFamilyOk() (*string, bool) {
	if o == nil || o.Family == nil {
		return nil, false
	}
	return o.Family, true
}

// HasFamily returns a boolean if a field has been set.
func (o *InstanceTypeFamily) HasFamily() bool {
	if o != nil && o.Family != nil {
		return true
	}

	return false
}

// SetFamily gets a reference to the given string and assigns it to the Family field.
func (o *InstanceTypeFamily) SetFamily(v string) {
	o.Family = &v
}

// GetInstanceTypes returns the InstanceTypes field value if set, zero value otherwise.
func (o *InstanceTypeFamily) GetInstanceTypes() []InstanceType {
	if o == nil || o.InstanceTypes == nil {
		var ret []InstanceType
		return ret
	}
	return *o.InstanceTypes
}

// GetInstanceTypesOk returns a tuple with the InstanceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeFamily) GetInstanceTypesOk() (*[]InstanceType, bool) {
	if o == nil || o.InstanceTypes == nil {
		return nil, false
	}
	return o.InstanceTypes, true
}

// HasInstanceTypes returns a boolean if a field has been set.
func (o *InstanceTypeFamily) HasInstanceTypes() bool {
	if o != nil && o.InstanceTypes != nil {
		return true
	}

	return false
}

// SetInstanceTypes gets a reference to the given []InstanceType and assigns it to the InstanceTypes field.
func (o *InstanceTypeFamily) SetInstanceTypes(v []InstanceType) {
	o.InstanceTypes = &v
}

func (o InstanceTypeFamily) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Family != nil {
		toSerialize["family"] = o.Family
	}
	if o.InstanceTypes != nil {
		toSerialize["instanceTypes"] = o.InstanceTypes
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceTypeFamily struct {
	value *InstanceTypeFamily
	isSet bool
}

func (v NullableInstanceTypeFamily) Get() *InstanceTypeFamily {
	return v.value
}

func (v *NullableInstanceTypeFamily) Set(val *InstanceTypeFamily) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypeFamily) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypeFamily) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypeFamily(val *InstanceTypeFamily) *NullableInstanceTypeFamily {
	return &NullableInstanceTypeFamily{value: val, isSet: true}
}

func (v NullableInstanceTypeFamily) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypeFamily) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


