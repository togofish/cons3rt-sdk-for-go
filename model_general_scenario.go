/*
CONS3RT API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: support@cons3rt.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cons3rt

import (
	"encoding/json"
)

// GeneralScenario struct for GeneralScenario
type GeneralScenario struct {
	Id                            *string                `json:"id,omitempty"`
	Name                          *string                `json:"name,omitempty"`
	Description                   *string                `json:"description,omitempty"`
	Offline                       *bool                  `json:"offline,omitempty"`
	State                         *string                `json:"state,omitempty"`
	Visibility                    *string                `json:"visibility,omitempty"`
	ScenarioBuildOrder            *int32                 `json:"scenarioBuildOrder,omitempty"`
	ScenarioHosts                 *[]MinimalScenarioHost `json:"scenarioHosts,omitempty"`
	PrepareScenarioConfiguration  *MinimalConfiguration  `json:"prepareScenarioConfiguration,omitempty"`
	TeardownScenarioConfiguration *MinimalConfiguration  `json:"teardownScenarioConfiguration,omitempty"`
}

// NewGeneralScenario instantiates a new GeneralScenario object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneralScenario() *GeneralScenario {
	this := GeneralScenario{}
	return &this
}

// NewGeneralScenarioWithDefaults instantiates a new GeneralScenario object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneralScenarioWithDefaults() *GeneralScenario {
	this := GeneralScenario{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GeneralScenario) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralScenario) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GeneralScenario) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GeneralScenario) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GeneralScenario) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralScenario) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GeneralScenario) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GeneralScenario) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GeneralScenario) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralScenario) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GeneralScenario) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GeneralScenario) SetDescription(v string) {
	o.Description = &v
}

// GetOffline returns the Offline field value if set, zero value otherwise.
func (o *GeneralScenario) GetOffline() bool {
	if o == nil || o.Offline == nil {
		var ret bool
		return ret
	}
	return *o.Offline
}

// GetOfflineOk returns a tuple with the Offline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralScenario) GetOfflineOk() (*bool, bool) {
	if o == nil || o.Offline == nil {
		return nil, false
	}
	return o.Offline, true
}

// HasOffline returns a boolean if a field has been set.
func (o *GeneralScenario) HasOffline() bool {
	if o != nil && o.Offline != nil {
		return true
	}

	return false
}

// SetOffline gets a reference to the given bool and assigns it to the Offline field.
func (o *GeneralScenario) SetOffline(v bool) {
	o.Offline = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *GeneralScenario) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralScenario) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *GeneralScenario) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *GeneralScenario) SetState(v string) {
	o.State = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *GeneralScenario) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralScenario) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *GeneralScenario) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *GeneralScenario) SetVisibility(v string) {
	o.Visibility = &v
}

// GetScenarioBuildOrder returns the ScenarioBuildOrder field value if set, zero value otherwise.
func (o *GeneralScenario) GetScenarioBuildOrder() int32 {
	if o == nil || o.ScenarioBuildOrder == nil {
		var ret int32
		return ret
	}
	return *o.ScenarioBuildOrder
}

// GetScenarioBuildOrderOk returns a tuple with the ScenarioBuildOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralScenario) GetScenarioBuildOrderOk() (*int32, bool) {
	if o == nil || o.ScenarioBuildOrder == nil {
		return nil, false
	}
	return o.ScenarioBuildOrder, true
}

// HasScenarioBuildOrder returns a boolean if a field has been set.
func (o *GeneralScenario) HasScenarioBuildOrder() bool {
	if o != nil && o.ScenarioBuildOrder != nil {
		return true
	}

	return false
}

// SetScenarioBuildOrder gets a reference to the given int32 and assigns it to the ScenarioBuildOrder field.
func (o *GeneralScenario) SetScenarioBuildOrder(v int32) {
	o.ScenarioBuildOrder = &v
}

// GetScenarioHosts returns the ScenarioHosts field value if set, zero value otherwise.
func (o *GeneralScenario) GetScenarioHosts() []MinimalScenarioHost {
	if o == nil || o.ScenarioHosts == nil {
		var ret []MinimalScenarioHost
		return ret
	}
	return *o.ScenarioHosts
}

// GetScenarioHostsOk returns a tuple with the ScenarioHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralScenario) GetScenarioHostsOk() (*[]MinimalScenarioHost, bool) {
	if o == nil || o.ScenarioHosts == nil {
		return nil, false
	}
	return o.ScenarioHosts, true
}

// HasScenarioHosts returns a boolean if a field has been set.
func (o *GeneralScenario) HasScenarioHosts() bool {
	if o != nil && o.ScenarioHosts != nil {
		return true
	}

	return false
}

// SetScenarioHosts gets a reference to the given []MinimalScenarioHost and assigns it to the ScenarioHosts field.
func (o *GeneralScenario) SetScenarioHosts(v []MinimalScenarioHost) {
	o.ScenarioHosts = &v
}

// GetPrepareScenarioConfiguration returns the PrepareScenarioConfiguration field value if set, zero value otherwise.
func (o *GeneralScenario) GetPrepareScenarioConfiguration() MinimalConfiguration {
	if o == nil || o.PrepareScenarioConfiguration == nil {
		var ret MinimalConfiguration
		return ret
	}
	return *o.PrepareScenarioConfiguration
}

// GetPrepareScenarioConfigurationOk returns a tuple with the PrepareScenarioConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralScenario) GetPrepareScenarioConfigurationOk() (*MinimalConfiguration, bool) {
	if o == nil || o.PrepareScenarioConfiguration == nil {
		return nil, false
	}
	return o.PrepareScenarioConfiguration, true
}

// HasPrepareScenarioConfiguration returns a boolean if a field has been set.
func (o *GeneralScenario) HasPrepareScenarioConfiguration() bool {
	if o != nil && o.PrepareScenarioConfiguration != nil {
		return true
	}

	return false
}

// SetPrepareScenarioConfiguration gets a reference to the given MinimalConfiguration and assigns it to the PrepareScenarioConfiguration field.
func (o *GeneralScenario) SetPrepareScenarioConfiguration(v MinimalConfiguration) {
	o.PrepareScenarioConfiguration = &v
}

// GetTeardownScenarioConfiguration returns the TeardownScenarioConfiguration field value if set, zero value otherwise.
func (o *GeneralScenario) GetTeardownScenarioConfiguration() MinimalConfiguration {
	if o == nil || o.TeardownScenarioConfiguration == nil {
		var ret MinimalConfiguration
		return ret
	}
	return *o.TeardownScenarioConfiguration
}

// GetTeardownScenarioConfigurationOk returns a tuple with the TeardownScenarioConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralScenario) GetTeardownScenarioConfigurationOk() (*MinimalConfiguration, bool) {
	if o == nil || o.TeardownScenarioConfiguration == nil {
		return nil, false
	}
	return o.TeardownScenarioConfiguration, true
}

// HasTeardownScenarioConfiguration returns a boolean if a field has been set.
func (o *GeneralScenario) HasTeardownScenarioConfiguration() bool {
	if o != nil && o.TeardownScenarioConfiguration != nil {
		return true
	}

	return false
}

// SetTeardownScenarioConfiguration gets a reference to the given MinimalConfiguration and assigns it to the TeardownScenarioConfiguration field.
func (o *GeneralScenario) SetTeardownScenarioConfiguration(v MinimalConfiguration) {
	o.TeardownScenarioConfiguration = &v
}

func (o GeneralScenario) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Offline != nil {
		toSerialize["offline"] = o.Offline
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.ScenarioBuildOrder != nil {
		toSerialize["scenarioBuildOrder"] = o.ScenarioBuildOrder
	}
	if o.ScenarioHosts != nil {
		toSerialize["scenarioHosts"] = o.ScenarioHosts
	}
	if o.PrepareScenarioConfiguration != nil {
		toSerialize["prepareScenarioConfiguration"] = o.PrepareScenarioConfiguration
	}
	if o.TeardownScenarioConfiguration != nil {
		toSerialize["teardownScenarioConfiguration"] = o.TeardownScenarioConfiguration
	}
	return json.Marshal(toSerialize)
}

type NullableGeneralScenario struct {
	value *GeneralScenario
	isSet bool
}

func (v NullableGeneralScenario) Get() *GeneralScenario {
	return v.value
}

func (v *NullableGeneralScenario) Set(val *GeneralScenario) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralScenario) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralScenario) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralScenario(val *GeneralScenario) *NullableGeneralScenario {
	return &NullableGeneralScenario{value: val, isSet: true}
}

func (v NullableGeneralScenario) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralScenario) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
